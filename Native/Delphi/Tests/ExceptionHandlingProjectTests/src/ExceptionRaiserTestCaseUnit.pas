unit ExceptionRaiserTestCaseUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, ExceptionRaiserUnit, System.SysUtils;

type
  // Test methods for class TExceptionRaiseer

  TExceptionRaiseerTestCase = class(TTestCase)
  strict private
    FExceptionRaiseer: TExceptionRaiseer;
  private
    function GetUnraisedExceptionMessage: string;
    procedure InternalStartExpectingException;
    procedure InternalStopExpectingException;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestRaiseException;
    procedure TestDoNotRaisException;
    procedure TestDoNotRaisException_Anonymous;
    procedure TestDoNotRaisException_WithParameter;
    procedure TestDoNotRaisException_Anonymous_WithParameter;
    procedure TestRaiseException_Anonymous;
    procedure TestRaiseException_WithParameter;
    procedure TestRaiseException_Anonymous_WithParameter;
    procedure TestRandomRaiseException;
    procedure TestRaiseUnwantedException;
    procedure TestRaiseUnwantedException_Anonymous;
    procedure TestRaiseUnwantedException_WithParameter;
    procedure TestRaiseUnwantedException_Anonymous_WithParameter;
    procedure TestRandomRaiseException_Anonymous;
    procedure TestRandomRaiseException_WithParameter;
    procedure TestRandomRaiseException_Anonymous_WithParameter;
  end;

implementation

function TExceptionRaiseerTestCase.GetUnraisedExceptionMessage: string;
begin
  Result := EExceptionRaiseerException.ClassName + ' was not raised';
end;

procedure TExceptionRaiseerTestCase.SetUp;
begin
  FExceptionRaiseer := TExceptionRaiseer.Create;
end;

procedure TExceptionRaiseerTestCase.TearDown;
begin
  FExceptionRaiseer.Free();
  FExceptionRaiseer := nil;
end;

procedure TExceptionRaiseerTestCase.TestRaiseException;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.RaiseException();
  InternalStopExpectingException();
end;

procedure TExceptionRaiseerTestCase.TestDoNotRaisException;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.DoNotRaiseException();
  InternalStopExpectingException();
end;

procedure TExceptionRaiseerTestCase.TestRandomRaiseException;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.RandomRaiseException();
  InternalStopExpectingException();
end;

procedure TExceptionRaiseerTestCase.TestRaiseUnwantedException;
begin
  FExceptionRaiseer.RaiseUnwantedException();
end;

procedure TExceptionRaiseerTestCase.InternalStopExpectingException;
var
  UnraisedExceptionMessage: string;
begin
  UnraisedExceptionMessage := GetUnraisedExceptionMessage();
  StopExpectingException(UnraisedExceptionMessage);
end;

procedure TExceptionRaiseerTestCase.InternalStartExpectingException;
begin
  StartExpectingException(EExceptionRaiseerException);
end;

procedure TExceptionRaiseerTestCase.TestDoNotRaisException_Anonymous;
begin
  CheckException(
    FExceptionRaiseer.DoNotRaiseException,
    EExceptionRaiseerException,
    GetUnraisedExceptionMessage()
  );
end;

procedure TExceptionRaiseerTestCase.TestDoNotRaisException_WithParameter;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.DoNotRaiseException_WithParameters([1]);
  InternalStopExpectingException();
end;

procedure
    TExceptionRaiseerTestCase.TestDoNotRaisException_Anonymous_WithParameter;
begin
//  CheckException(
//    procedure
//    begin
//      FExceptionRaiseer.DoNotRaiseException_WithParameters([1]);
//    end;
//    ,
//    EExceptionRaiseerException,
//    GetUnraisedExceptionMessage()
//  );
  InternalStartExpectingException();
  FExceptionRaiseer.DoNotRaiseException_WithParameters([1]);
  InternalStopExpectingException();
end;

procedure TExceptionRaiseerTestCase.TestRaiseException_Anonymous;
begin
  CheckException(
    FExceptionRaiseer.RaiseException,
    EExceptionRaiseerException,
    GetUnraisedExceptionMessage()
  );
end;

procedure TExceptionRaiseerTestCase.TestRaiseException_WithParameter;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.RaiseException_WithParameters([1]);
  InternalStopExpectingException();
end;

procedure TExceptionRaiseerTestCase.TestRaiseException_Anonymous_WithParameter;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.RaiseException_WithParameters([1]);
  InternalStopExpectingException();
end;

procedure TExceptionRaiseerTestCase.TestRaiseUnwantedException_Anonymous;
begin
  CheckException( // 2 things wrong: no expected exception, and wrong exception
    FExceptionRaiseer.RaiseUnwantedException,
    EExceptionRaiseerException,
    GetUnraisedExceptionMessage()
  );
end;

procedure TExceptionRaiseerTestCase.TestRaiseUnwantedException_WithParameter;
begin
  FExceptionRaiseer.RaiseUnwantedException_WithParameters([1]);
end;

procedure
    TExceptionRaiseerTestCase.TestRaiseUnwantedException_Anonymous_WithParameter;
begin
//  CheckException(
//    FExceptionRaiseer.RaiseUnwantedException_WithParameters,
//    EExceptionRaiseerException,
//    GetUnraisedExceptionMessage()
//  );
  FExceptionRaiseer.RaiseUnwantedException_WithParameters([1]);
end;

procedure TExceptionRaiseerTestCase.TestRandomRaiseException_Anonymous;
begin
  CheckException(
    FExceptionRaiseer.RandomRaiseException,
    EExceptionRaiseerException,
    GetUnraisedExceptionMessage()
  );
end;

procedure TExceptionRaiseerTestCase.TestRandomRaiseException_WithParameter;
begin
  InternalStartExpectingException();
  FExceptionRaiseer.RandomRaiseException();
  InternalStopExpectingException();
end;

procedure
    TExceptionRaiseerTestCase.TestRandomRaiseException_Anonymous_WithParameter;
begin
//  CheckException(
//    FExceptionRaiseer.RandomRaiseException_WithParameters,
//    EExceptionRaiseerException,
//    GetUnraisedExceptionMessage()
//  );
  InternalStartExpectingException();
  FExceptionRaiseer.RandomRaiseException_WithParameters([1]);
  InternalStopExpectingException();
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TExceptionRaiseerTestCase.Suite);
end.

