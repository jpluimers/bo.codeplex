// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.3.0.39602
//    <NameSpace>bo.POI.KML</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>True</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace bo.POI.KML {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Change", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangeType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ChangeType {
        
        private List<AbstractObjectType> itemsField;
        
        private List<ItemsChoiceType1> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ChangeType class constructor
        /// </summary>
        public ChangeType() {
            this.itemsElementNameField = new List<ItemsChoiceType1>();
            this.itemsField = new List<AbstractObjectType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Alias", typeof(AliasType))]
        [System.Xml.Serialization.XmlElementAttribute("Data", typeof(DataType))]
        [System.Xml.Serialization.XmlElementAttribute("Icon", typeof(LinkType))]
        [System.Xml.Serialization.XmlElementAttribute("ImagePyramid", typeof(ImagePyramidType))]
        [System.Xml.Serialization.XmlElementAttribute("ItemIcon", typeof(ItemIconType))]
        [System.Xml.Serialization.XmlElementAttribute("LatLonAltBox", typeof(LatLonAltBoxType))]
        [System.Xml.Serialization.XmlElementAttribute("LatLonBox", typeof(LatLonBoxType))]
        [System.Xml.Serialization.XmlElementAttribute("Link", typeof(LinkType))]
        [System.Xml.Serialization.XmlElementAttribute("Location", typeof(LocationType))]
        [System.Xml.Serialization.XmlElementAttribute("Lod", typeof(LodType))]
        [System.Xml.Serialization.XmlElementAttribute("Orientation", typeof(OrientationType))]
        [System.Xml.Serialization.XmlElementAttribute("Pair", typeof(PairType))]
        [System.Xml.Serialization.XmlElementAttribute("Region", typeof(RegionType))]
        [System.Xml.Serialization.XmlElementAttribute("ResourceMap", typeof(ResourceMapType))]
        [System.Xml.Serialization.XmlElementAttribute("Scale", typeof(ScaleType))]
        [System.Xml.Serialization.XmlElementAttribute("SchemaData", typeof(SchemaDataType))]
        [System.Xml.Serialization.XmlElementAttribute("Url", typeof(LinkType))]
        [System.Xml.Serialization.XmlElementAttribute("ViewVolume", typeof(ViewVolumeType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ItemsChoiceType1> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ChangeType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ChangeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ChangeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ChangeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ChangeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ChangeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ChangeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ChangeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ChangeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ChangeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ChangeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ChangeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ChangeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ChangeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ChangeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ChangeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ChangeType object
        /// </summary>
        public virtual ChangeType Clone() {
            return ((ChangeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Alias", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AliasType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AliasType : AbstractObjectType {
        
        private string targetHrefField;
        
        private string sourceHrefField;
        
        private List<string> aliasSimpleExtensionGroupField;
        
        private List<AbstractObjectType> aliasObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AliasType class constructor
        /// </summary>
        public AliasType() {
            this.aliasObjectExtensionGroupField = new List<AbstractObjectType>();
            this.aliasSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetHref {
            get {
                return this.targetHrefField;
            }
            set {
                this.targetHrefField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sourceHref {
            get {
                return this.sourceHrefField;
            }
            set {
                this.sourceHrefField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AliasSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AliasSimpleExtensionGroup {
            get {
                return this.aliasSimpleExtensionGroupField;
            }
            set {
                this.aliasSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AliasObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AliasObjectExtensionGroup {
            get {
                return this.aliasObjectExtensionGroupField;
            }
            set {
                this.aliasObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AliasType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AliasType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AliasType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AliasType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AliasType obj, out System.Exception exception) {
            exception = null;
            obj = default(AliasType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AliasType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AliasType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AliasType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AliasType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AliasType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AliasType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AliasType obj, out System.Exception exception) {
            exception = null;
            obj = default(AliasType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AliasType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AliasType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AliasType object
        /// </summary>
        public virtual AliasType Clone() {
            return ((AliasType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ImagePyramidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViewVolumeType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AliasType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResourceMapType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScaleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrientationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeometryType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ModelType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolygonType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinearRingType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStringType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiGeometryType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SchemaDataType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LodType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLatLonBoxType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LatLonBoxType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LatLonAltBoxType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RegionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PairType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemIconType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BasicLinkType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinkType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSubStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ListStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BalloonStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColorStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolyStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LabelStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IconStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStyleSelectorType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StyleMapType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSpanType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeStampType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractViewType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LookAtType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhotoOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroundOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NetworkLinkType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlacemarkType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractContainerType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FolderType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DocumentType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractObjectGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractObjectType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractObjectType {
        
        private List<string> objectSimpleExtensionGroupField;
        
        private string idField;
        
        private string targetIdField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractObjectType class constructor
        /// </summary>
        public AbstractObjectType() {
            this.objectSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ObjectSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ObjectSimpleExtensionGroup {
            get {
                return this.objectSimpleExtensionGroupField;
            }
            set {
                this.objectSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NCName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetId {
            get {
                return this.targetIdField;
            }
            set {
                this.targetIdField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractObjectType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractObjectType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractObjectType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractObjectType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractObjectType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractObjectType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractObjectType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractObjectType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractObjectType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractObjectType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractObjectType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractObjectType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractObjectType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractObjectType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractObjectType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractObjectType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractObjectType object
        /// </summary>
        public virtual AbstractObjectType Clone() {
            return ((AbstractObjectType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ImagePyramid", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImagePyramidType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ImagePyramidType : AbstractObjectType {
        
        private int tileSizeField;
        
        private bool tileSizeFieldSpecified;
        
        private int maxWidthField;
        
        private bool maxWidthFieldSpecified;
        
        private int maxHeightField;
        
        private bool maxHeightFieldSpecified;
        
        private gridOriginEnumType gridOriginField;
        
        private bool gridOriginFieldSpecified;
        
        private List<string> imagePyramidSimpleExtensionGroupField;
        
        private List<AbstractObjectType> imagePyramidObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ImagePyramidType() {
            this.imagePyramidObjectExtensionGroupField = new List<AbstractObjectType>();
            this.imagePyramidSimpleExtensionGroupField = new List<string>();
            this.tileSizeField = 256;
            this.maxWidthField = 0;
            this.maxHeightField = 0;
            this.gridOriginField = gridOriginEnumType.lowerLeft;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int tileSize {
            get {
                return this.tileSizeField;
            }
            set {
                this.tileSizeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tileSizeSpecified {
            get {
                return this.tileSizeFieldSpecified;
            }
            set {
                this.tileSizeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int maxWidth {
            get {
                return this.maxWidthField;
            }
            set {
                this.maxWidthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxWidthSpecified {
            get {
                return this.maxWidthFieldSpecified;
            }
            set {
                this.maxWidthFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int maxHeight {
            get {
                return this.maxHeightField;
            }
            set {
                this.maxHeightField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxHeightSpecified {
            get {
                return this.maxHeightFieldSpecified;
            }
            set {
                this.maxHeightFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public gridOriginEnumType gridOrigin {
            get {
                return this.gridOriginField;
            }
            set {
                this.gridOriginField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool gridOriginSpecified {
            get {
                return this.gridOriginFieldSpecified;
            }
            set {
                this.gridOriginFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ImagePyramidSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ImagePyramidSimpleExtensionGroup {
            get {
                return this.imagePyramidSimpleExtensionGroupField;
            }
            set {
                this.imagePyramidSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ImagePyramidObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ImagePyramidObjectExtensionGroup {
            get {
                return this.imagePyramidObjectExtensionGroupField;
            }
            set {
                this.imagePyramidObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ImagePyramidType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ImagePyramidType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ImagePyramidType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ImagePyramidType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ImagePyramidType obj, out System.Exception exception) {
            exception = null;
            obj = default(ImagePyramidType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ImagePyramidType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ImagePyramidType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ImagePyramidType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ImagePyramidType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ImagePyramidType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ImagePyramidType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ImagePyramidType obj, out System.Exception exception) {
            exception = null;
            obj = default(ImagePyramidType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ImagePyramidType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ImagePyramidType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ImagePyramidType object
        /// </summary>
        public virtual ImagePyramidType Clone() {
            return ((ImagePyramidType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("gridOrigin", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum gridOriginEnumType {
        
        /// <remarks/>
        lowerLeft,
        
        /// <remarks/>
        upperLeft,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ViewVolume", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ViewVolumeType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ViewVolumeType : AbstractObjectType {
        
        private double leftFovField;
        
        private bool leftFovFieldSpecified;
        
        private double rightFovField;
        
        private bool rightFovFieldSpecified;
        
        private double bottomFovField;
        
        private bool bottomFovFieldSpecified;
        
        private double topFovField;
        
        private bool topFovFieldSpecified;
        
        private double nearField;
        
        private bool nearFieldSpecified;
        
        private List<string> viewVolumeSimpleExtensionGroupField;
        
        private List<AbstractObjectType> viewVolumeObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ViewVolumeType() {
            this.viewVolumeObjectExtensionGroupField = new List<AbstractObjectType>();
            this.viewVolumeSimpleExtensionGroupField = new List<string>();
            this.leftFovField = 0;
            this.rightFovField = 0;
            this.bottomFovField = 0;
            this.topFovField = 0;
            this.nearField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double leftFov {
            get {
                return this.leftFovField;
            }
            set {
                this.leftFovField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool leftFovSpecified {
            get {
                return this.leftFovFieldSpecified;
            }
            set {
                this.leftFovFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rightFov {
            get {
                return this.rightFovField;
            }
            set {
                this.rightFovField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rightFovSpecified {
            get {
                return this.rightFovFieldSpecified;
            }
            set {
                this.rightFovFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double bottomFov {
            get {
                return this.bottomFovField;
            }
            set {
                this.bottomFovField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool bottomFovSpecified {
            get {
                return this.bottomFovFieldSpecified;
            }
            set {
                this.bottomFovFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double topFov {
            get {
                return this.topFovField;
            }
            set {
                this.topFovField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool topFovSpecified {
            get {
                return this.topFovFieldSpecified;
            }
            set {
                this.topFovFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double near {
            get {
                return this.nearField;
            }
            set {
                this.nearField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool nearSpecified {
            get {
                return this.nearFieldSpecified;
            }
            set {
                this.nearFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ViewVolumeSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ViewVolumeSimpleExtensionGroup {
            get {
                return this.viewVolumeSimpleExtensionGroupField;
            }
            set {
                this.viewVolumeSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ViewVolumeObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ViewVolumeObjectExtensionGroup {
            get {
                return this.viewVolumeObjectExtensionGroupField;
            }
            set {
                this.viewVolumeObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ViewVolumeType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ViewVolumeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ViewVolumeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ViewVolumeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ViewVolumeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ViewVolumeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ViewVolumeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ViewVolumeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ViewVolumeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ViewVolumeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ViewVolumeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ViewVolumeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ViewVolumeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ViewVolumeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ViewVolumeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ViewVolumeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ViewVolumeType object
        /// </summary>
        public virtual ViewVolumeType Clone() {
            return ((ViewVolumeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ResourceMap", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceMapType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ResourceMapType : AbstractObjectType {
        
        private List<AliasType> aliasField;
        
        private List<string> resourceMapSimpleExtensionGroupField;
        
        private List<AbstractObjectType> resourceMapObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ResourceMapType class constructor
        /// </summary>
        public ResourceMapType() {
            this.resourceMapObjectExtensionGroupField = new List<AbstractObjectType>();
            this.resourceMapSimpleExtensionGroupField = new List<string>();
            this.aliasField = new List<AliasType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Alias")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AliasType> Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ResourceMapSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ResourceMapSimpleExtensionGroup {
            get {
                return this.resourceMapSimpleExtensionGroupField;
            }
            set {
                this.resourceMapSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ResourceMapObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ResourceMapObjectExtensionGroup {
            get {
                return this.resourceMapObjectExtensionGroupField;
            }
            set {
                this.resourceMapObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ResourceMapType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ResourceMapType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ResourceMapType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ResourceMapType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ResourceMapType obj, out System.Exception exception) {
            exception = null;
            obj = default(ResourceMapType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ResourceMapType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ResourceMapType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ResourceMapType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ResourceMapType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ResourceMapType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ResourceMapType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ResourceMapType obj, out System.Exception exception) {
            exception = null;
            obj = default(ResourceMapType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ResourceMapType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ResourceMapType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ResourceMapType object
        /// </summary>
        public virtual ResourceMapType Clone() {
            return ((ResourceMapType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Scale", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScaleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ScaleType : AbstractObjectType {
        
        private double xField;
        
        private bool xFieldSpecified;
        
        private double yField;
        
        private bool yFieldSpecified;
        
        private double zField;
        
        private bool zFieldSpecified;
        
        private List<string> scaleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> scaleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ScaleType() {
            this.scaleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.scaleSimpleExtensionGroupField = new List<string>();
            this.xField = 1;
            this.yField = 1;
            this.zField = 1;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool xSpecified {
            get {
                return this.xFieldSpecified;
            }
            set {
                this.xFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ySpecified {
            get {
                return this.yFieldSpecified;
            }
            set {
                this.yFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double z {
            get {
                return this.zField;
            }
            set {
                this.zField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool zSpecified {
            get {
                return this.zFieldSpecified;
            }
            set {
                this.zFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ScaleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ScaleSimpleExtensionGroup {
            get {
                return this.scaleSimpleExtensionGroupField;
            }
            set {
                this.scaleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ScaleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ScaleObjectExtensionGroup {
            get {
                return this.scaleObjectExtensionGroupField;
            }
            set {
                this.scaleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ScaleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ScaleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ScaleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ScaleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ScaleType obj, out System.Exception exception) {
            exception = null;
            obj = default(ScaleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ScaleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ScaleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ScaleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ScaleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ScaleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ScaleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScaleType obj, out System.Exception exception) {
            exception = null;
            obj = default(ScaleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ScaleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ScaleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ScaleType object
        /// </summary>
        public virtual ScaleType Clone() {
            return ((ScaleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Orientation", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrientationType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class OrientationType : AbstractObjectType {
        
        private double headingField;
        
        private bool headingFieldSpecified;
        
        private double tiltField;
        
        private bool tiltFieldSpecified;
        
        private double rollField;
        
        private bool rollFieldSpecified;
        
        private List<string> orientationSimpleExtensionGroupField;
        
        private List<AbstractObjectType> orientationObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public OrientationType() {
            this.orientationObjectExtensionGroupField = new List<AbstractObjectType>();
            this.orientationSimpleExtensionGroupField = new List<string>();
            this.headingField = 0;
            this.tiltField = 0;
            this.rollField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double heading {
            get {
                return this.headingField;
            }
            set {
                this.headingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool headingSpecified {
            get {
                return this.headingFieldSpecified;
            }
            set {
                this.headingFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double tilt {
            get {
                return this.tiltField;
            }
            set {
                this.tiltField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tiltSpecified {
            get {
                return this.tiltFieldSpecified;
            }
            set {
                this.tiltFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double roll {
            get {
                return this.rollField;
            }
            set {
                this.rollField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rollSpecified {
            get {
                return this.rollFieldSpecified;
            }
            set {
                this.rollFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OrientationSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> OrientationSimpleExtensionGroup {
            get {
                return this.orientationSimpleExtensionGroupField;
            }
            set {
                this.orientationSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OrientationObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> OrientationObjectExtensionGroup {
            get {
                return this.orientationObjectExtensionGroupField;
            }
            set {
                this.orientationObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrientationType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrientationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrientationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrientationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrientationType obj, out System.Exception exception) {
            exception = null;
            obj = default(OrientationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrientationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrientationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrientationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrientationType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrientationType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrientationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out OrientationType obj, out System.Exception exception) {
            exception = null;
            obj = default(OrientationType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrientationType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrientationType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this OrientationType object
        /// </summary>
        public virtual OrientationType Clone() {
            return ((OrientationType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Location", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LocationType : AbstractObjectType {
        
        private double longitudeField;
        
        private bool longitudeFieldSpecified;
        
        private double latitudeField;
        
        private bool latitudeFieldSpecified;
        
        private double altitudeField;
        
        private bool altitudeFieldSpecified;
        
        private List<string> locationSimpleExtensionGroupField;
        
        private List<AbstractObjectType> locationObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LocationType() {
            this.locationObjectExtensionGroupField = new List<AbstractObjectType>();
            this.locationSimpleExtensionGroupField = new List<string>();
            this.longitudeField = 0;
            this.latitudeField = 0;
            this.altitudeField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool longitudeSpecified {
            get {
                return this.longitudeFieldSpecified;
            }
            set {
                this.longitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool latitudeSpecified {
            get {
                return this.latitudeFieldSpecified;
            }
            set {
                this.latitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double altitude {
            get {
                return this.altitudeField;
            }
            set {
                this.altitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool altitudeSpecified {
            get {
                return this.altitudeFieldSpecified;
            }
            set {
                this.altitudeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LocationSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LocationSimpleExtensionGroup {
            get {
                return this.locationSimpleExtensionGroupField;
            }
            set {
                this.locationSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LocationObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LocationObjectExtensionGroup {
            get {
                return this.locationObjectExtensionGroupField;
            }
            set {
                this.locationObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LocationType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LocationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LocationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LocationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LocationType obj, out System.Exception exception) {
            exception = null;
            obj = default(LocationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LocationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LocationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LocationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LocationType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LocationType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LocationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LocationType obj, out System.Exception exception) {
            exception = null;
            obj = default(LocationType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LocationType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LocationType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LocationType object
        /// </summary>
        public virtual LocationType Clone() {
            return ((LocationType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ModelType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolygonType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinearRingType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStringType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultiGeometryType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeometryGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractGeometryType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractGeometryType : AbstractObjectType {
        
        private List<string> abstractGeometrySimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractGeometryObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractGeometryType class constructor
        /// </summary>
        public AbstractGeometryType() {
            this.abstractGeometryObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractGeometrySimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractGeometrySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractGeometrySimpleExtensionGroup {
            get {
                return this.abstractGeometrySimpleExtensionGroupField;
            }
            set {
                this.abstractGeometrySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractGeometryObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractGeometryObjectExtensionGroup {
            get {
                return this.abstractGeometryObjectExtensionGroupField;
            }
            set {
                this.abstractGeometryObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractGeometryType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractGeometryType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractGeometryType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractGeometryType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractGeometryType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractGeometryType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractGeometryType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractGeometryType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractGeometryType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractGeometryType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractGeometryType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractGeometryType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractGeometryType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractGeometryType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractGeometryType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractGeometryType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractGeometryType object
        /// </summary>
        public virtual AbstractGeometryType Clone() {
            return ((AbstractGeometryType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Model", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModelType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ModelType : AbstractGeometryType {
        
        private altitudeModeEnumType itemField;
        
        private LocationType locationField;
        
        private OrientationType orientationField;
        
        private ScaleType scaleField;
        
        private LinkType linkField;
        
        private ResourceMapType resourceMapField;
        
        private List<string> modelSimpleExtensionGroupField;
        
        private List<AbstractObjectType> modelObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ModelType() {
            this.modelObjectExtensionGroupField = new List<AbstractObjectType>();
            this.modelSimpleExtensionGroupField = new List<string>();
            this.resourceMapField = new ResourceMapType();
            this.linkField = new LinkType();
            this.scaleField = new ScaleType();
            this.orientationField = new OrientationType();
            this.locationField = new LocationType();
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LocationType Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrientationType Orientation {
            get {
                return this.orientationField;
            }
            set {
                this.orientationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ScaleType Scale {
            get {
                return this.scaleField;
            }
            set {
                this.scaleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LinkType Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ResourceMapType ResourceMap {
            get {
                return this.resourceMapField;
            }
            set {
                this.resourceMapField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ModelSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ModelSimpleExtensionGroup {
            get {
                return this.modelSimpleExtensionGroupField;
            }
            set {
                this.modelSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ModelObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ModelObjectExtensionGroup {
            get {
                return this.modelObjectExtensionGroupField;
            }
            set {
                this.modelObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ModelType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ModelType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ModelType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ModelType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ModelType obj, out System.Exception exception) {
            exception = null;
            obj = default(ModelType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ModelType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ModelType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ModelType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ModelType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ModelType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ModelType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ModelType obj, out System.Exception exception) {
            exception = null;
            obj = default(ModelType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ModelType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ModelType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ModelType object
        /// </summary>
        public virtual ModelType Clone() {
            return ((ModelType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("altitudeMode", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum altitudeModeEnumType {
        
        /// <remarks/>
        clampToGround,
        
        /// <remarks/>
        relativeToGround,
        
        /// <remarks/>
        absolute,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Icon", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LinkType : BasicLinkType {
        
        private refreshModeEnumType refreshModeField;
        
        private bool refreshModeFieldSpecified;
        
        private double refreshIntervalField;
        
        private bool refreshIntervalFieldSpecified;
        
        private viewRefreshModeEnumType viewRefreshModeField;
        
        private bool viewRefreshModeFieldSpecified;
        
        private double viewRefreshTimeField;
        
        private bool viewRefreshTimeFieldSpecified;
        
        private double viewBoundScaleField;
        
        private bool viewBoundScaleFieldSpecified;
        
        private string viewFormatField;
        
        private string httpQueryField;
        
        private List<string> linkSimpleExtensionGroupField;
        
        private List<AbstractObjectType> linkObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LinkType() {
            this.linkObjectExtensionGroupField = new List<AbstractObjectType>();
            this.linkSimpleExtensionGroupField = new List<string>();
            this.refreshModeField = refreshModeEnumType.onChange;
            this.refreshIntervalField = 4;
            this.viewRefreshModeField = viewRefreshModeEnumType.never;
            this.viewRefreshTimeField = 4;
            this.viewBoundScaleField = 1;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public refreshModeEnumType refreshMode {
            get {
                return this.refreshModeField;
            }
            set {
                this.refreshModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool refreshModeSpecified {
            get {
                return this.refreshModeFieldSpecified;
            }
            set {
                this.refreshModeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double refreshInterval {
            get {
                return this.refreshIntervalField;
            }
            set {
                this.refreshIntervalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool refreshIntervalSpecified {
            get {
                return this.refreshIntervalFieldSpecified;
            }
            set {
                this.refreshIntervalFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public viewRefreshModeEnumType viewRefreshMode {
            get {
                return this.viewRefreshModeField;
            }
            set {
                this.viewRefreshModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool viewRefreshModeSpecified {
            get {
                return this.viewRefreshModeFieldSpecified;
            }
            set {
                this.viewRefreshModeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double viewRefreshTime {
            get {
                return this.viewRefreshTimeField;
            }
            set {
                this.viewRefreshTimeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool viewRefreshTimeSpecified {
            get {
                return this.viewRefreshTimeFieldSpecified;
            }
            set {
                this.viewRefreshTimeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double viewBoundScale {
            get {
                return this.viewBoundScaleField;
            }
            set {
                this.viewBoundScaleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool viewBoundScaleSpecified {
            get {
                return this.viewBoundScaleFieldSpecified;
            }
            set {
                this.viewBoundScaleFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string viewFormat {
            get {
                return this.viewFormatField;
            }
            set {
                this.viewFormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string httpQuery {
            get {
                return this.httpQueryField;
            }
            set {
                this.httpQueryField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LinkSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LinkSimpleExtensionGroup {
            get {
                return this.linkSimpleExtensionGroupField;
            }
            set {
                this.linkSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LinkObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LinkObjectExtensionGroup {
            get {
                return this.linkObjectExtensionGroupField;
            }
            set {
                this.linkObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LinkType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LinkType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LinkType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LinkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LinkType obj, out System.Exception exception) {
            exception = null;
            obj = default(LinkType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LinkType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LinkType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LinkType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LinkType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LinkType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LinkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LinkType obj, out System.Exception exception) {
            exception = null;
            obj = default(LinkType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LinkType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LinkType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LinkType object
        /// </summary>
        public virtual LinkType Clone() {
            return ((LinkType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("refreshMode", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum refreshModeEnumType {
        
        /// <remarks/>
        onChange,
        
        /// <remarks/>
        onInterval,
        
        /// <remarks/>
        onExpire,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("viewRefreshMode", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum viewRefreshModeEnumType {
        
        /// <remarks/>
        never,
        
        /// <remarks/>
        onRequest,
        
        /// <remarks/>
        onStop,
        
        /// <remarks/>
        onRegion,
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LinkType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/kml/2.2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasicLinkType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class BasicLinkType : AbstractObjectType {
        
        private string hrefField;
        
        private List<string> basicLinkSimpleExtensionGroupField;
        
        private List<AbstractObjectType> basicLinkObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BasicLinkType class constructor
        /// </summary>
        public BasicLinkType() {
            this.basicLinkObjectExtensionGroupField = new List<AbstractObjectType>();
            this.basicLinkSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string href {
            get {
                return this.hrefField;
            }
            set {
                this.hrefField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BasicLinkSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> BasicLinkSimpleExtensionGroup {
            get {
                return this.basicLinkSimpleExtensionGroupField;
            }
            set {
                this.basicLinkSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BasicLinkObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> BasicLinkObjectExtensionGroup {
            get {
                return this.basicLinkObjectExtensionGroupField;
            }
            set {
                this.basicLinkObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BasicLinkType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BasicLinkType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BasicLinkType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BasicLinkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BasicLinkType obj, out System.Exception exception) {
            exception = null;
            obj = default(BasicLinkType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BasicLinkType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BasicLinkType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BasicLinkType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BasicLinkType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BasicLinkType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BasicLinkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BasicLinkType obj, out System.Exception exception) {
            exception = null;
            obj = default(BasicLinkType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BasicLinkType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BasicLinkType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this BasicLinkType object
        /// </summary>
        public virtual BasicLinkType Clone() {
            return ((BasicLinkType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Polygon", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PolygonType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PolygonType : AbstractGeometryType {
        
        private bool extrudeField;
        
        private bool extrudeFieldSpecified;
        
        private bool tessellateField;
        
        private bool tessellateFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private BoundaryType outerBoundaryIsField;
        
        private List<BoundaryType> innerBoundaryIsField;
        
        private List<string> polygonSimpleExtensionGroupField;
        
        private List<AbstractObjectType> polygonObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PolygonType() {
            this.polygonObjectExtensionGroupField = new List<AbstractObjectType>();
            this.polygonSimpleExtensionGroupField = new List<string>();
            this.innerBoundaryIsField = new List<BoundaryType>();
            this.outerBoundaryIsField = new BoundaryType();
            this.extrudeField = false;
            this.tessellateField = false;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrude {
            get {
                return this.extrudeField;
            }
            set {
                this.extrudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrudeSpecified {
            get {
                return this.extrudeFieldSpecified;
            }
            set {
                this.extrudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tessellate {
            get {
                return this.tessellateField;
            }
            set {
                this.tessellateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tessellateSpecified {
            get {
                return this.tessellateFieldSpecified;
            }
            set {
                this.tessellateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BoundaryType outerBoundaryIs {
            get {
                return this.outerBoundaryIsField;
            }
            set {
                this.outerBoundaryIsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("innerBoundaryIs")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<BoundaryType> innerBoundaryIs {
            get {
                return this.innerBoundaryIsField;
            }
            set {
                this.innerBoundaryIsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PolygonSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> PolygonSimpleExtensionGroup {
            get {
                return this.polygonSimpleExtensionGroupField;
            }
            set {
                this.polygonSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PolygonObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> PolygonObjectExtensionGroup {
            get {
                return this.polygonObjectExtensionGroupField;
            }
            set {
                this.polygonObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PolygonType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PolygonType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PolygonType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PolygonType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PolygonType obj, out System.Exception exception) {
            exception = null;
            obj = default(PolygonType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PolygonType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PolygonType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PolygonType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PolygonType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PolygonType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PolygonType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PolygonType obj, out System.Exception exception) {
            exception = null;
            obj = default(PolygonType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PolygonType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PolygonType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PolygonType object
        /// </summary>
        public virtual PolygonType Clone() {
            return ((PolygonType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("outerBoundaryIs", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoundaryType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class BoundaryType {
        
        private LinearRingType linearRingField;
        
        private List<string> boundarySimpleExtensionGroupField;
        
        private List<AbstractObjectType> boundaryObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BoundaryType class constructor
        /// </summary>
        public BoundaryType() {
            this.boundaryObjectExtensionGroupField = new List<AbstractObjectType>();
            this.boundarySimpleExtensionGroupField = new List<string>();
            this.linearRingField = new LinearRingType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LinearRingType LinearRing {
            get {
                return this.linearRingField;
            }
            set {
                this.linearRingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BoundarySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> BoundarySimpleExtensionGroup {
            get {
                return this.boundarySimpleExtensionGroupField;
            }
            set {
                this.boundarySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BoundaryObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> BoundaryObjectExtensionGroup {
            get {
                return this.boundaryObjectExtensionGroupField;
            }
            set {
                this.boundaryObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BoundaryType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BoundaryType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BoundaryType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BoundaryType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BoundaryType obj, out System.Exception exception) {
            exception = null;
            obj = default(BoundaryType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BoundaryType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BoundaryType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BoundaryType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BoundaryType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BoundaryType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BoundaryType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BoundaryType obj, out System.Exception exception) {
            exception = null;
            obj = default(BoundaryType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BoundaryType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BoundaryType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this BoundaryType object
        /// </summary>
        public virtual BoundaryType Clone() {
            return ((BoundaryType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LinearRing", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinearRingType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LinearRingType : AbstractGeometryType {
        
        private bool extrudeField;
        
        private bool extrudeFieldSpecified;
        
        private bool tessellateField;
        
        private bool tessellateFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private string coordinatesField;
        
        private List<string> linearRingSimpleExtensionGroupField;
        
        private List<AbstractObjectType> linearRingObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LinearRingType() {
            this.linearRingObjectExtensionGroupField = new List<AbstractObjectType>();
            this.linearRingSimpleExtensionGroupField = new List<string>();
            this.extrudeField = false;
            this.tessellateField = false;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrude {
            get {
                return this.extrudeField;
            }
            set {
                this.extrudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrudeSpecified {
            get {
                return this.extrudeFieldSpecified;
            }
            set {
                this.extrudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tessellate {
            get {
                return this.tessellateField;
            }
            set {
                this.tessellateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tessellateSpecified {
            get {
                return this.tessellateFieldSpecified;
            }
            set {
                this.tessellateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LinearRingSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LinearRingSimpleExtensionGroup {
            get {
                return this.linearRingSimpleExtensionGroupField;
            }
            set {
                this.linearRingSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LinearRingObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LinearRingObjectExtensionGroup {
            get {
                return this.linearRingObjectExtensionGroupField;
            }
            set {
                this.linearRingObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LinearRingType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LinearRingType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LinearRingType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LinearRingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LinearRingType obj, out System.Exception exception) {
            exception = null;
            obj = default(LinearRingType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LinearRingType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LinearRingType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LinearRingType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LinearRingType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LinearRingType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LinearRingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LinearRingType obj, out System.Exception exception) {
            exception = null;
            obj = default(LinearRingType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LinearRingType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LinearRingType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LinearRingType object
        /// </summary>
        public virtual LinearRingType Clone() {
            return ((LinearRingType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LineString", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineStringType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LineStringType : AbstractGeometryType {
        
        private bool extrudeField;
        
        private bool extrudeFieldSpecified;
        
        private bool tessellateField;
        
        private bool tessellateFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private string coordinatesField;
        
        private List<string> lineStringSimpleExtensionGroupField;
        
        private List<AbstractObjectType> lineStringObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LineStringType() {
            this.lineStringObjectExtensionGroupField = new List<AbstractObjectType>();
            this.lineStringSimpleExtensionGroupField = new List<string>();
            this.extrudeField = false;
            this.tessellateField = false;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrude {
            get {
                return this.extrudeField;
            }
            set {
                this.extrudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrudeSpecified {
            get {
                return this.extrudeFieldSpecified;
            }
            set {
                this.extrudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tessellate {
            get {
                return this.tessellateField;
            }
            set {
                this.tessellateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tessellateSpecified {
            get {
                return this.tessellateFieldSpecified;
            }
            set {
                this.tessellateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineStringSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LineStringSimpleExtensionGroup {
            get {
                return this.lineStringSimpleExtensionGroupField;
            }
            set {
                this.lineStringSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineStringObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LineStringObjectExtensionGroup {
            get {
                return this.lineStringObjectExtensionGroupField;
            }
            set {
                this.lineStringObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LineStringType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LineStringType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LineStringType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LineStringType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LineStringType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineStringType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LineStringType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LineStringType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LineStringType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LineStringType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LineStringType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LineStringType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LineStringType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineStringType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LineStringType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LineStringType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LineStringType object
        /// </summary>
        public virtual LineStringType Clone() {
            return ((LineStringType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Point", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PointType : AbstractGeometryType {
        
        private bool extrudeField;
        
        private bool extrudeFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private string coordinatesField;
        
        private List<string> pointSimpleExtensionGroupField;
        
        private List<AbstractObjectType> pointObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PointType() {
            this.pointObjectExtensionGroupField = new List<AbstractObjectType>();
            this.pointSimpleExtensionGroupField = new List<string>();
            this.extrudeField = false;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrude {
            get {
                return this.extrudeField;
            }
            set {
                this.extrudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool extrudeSpecified {
            get {
                return this.extrudeFieldSpecified;
            }
            set {
                this.extrudeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PointSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> PointSimpleExtensionGroup {
            get {
                return this.pointSimpleExtensionGroupField;
            }
            set {
                this.pointSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PointObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> PointObjectExtensionGroup {
            get {
                return this.pointObjectExtensionGroupField;
            }
            set {
                this.pointObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PointType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PointType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PointType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PointType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PointType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PointType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PointType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PointType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PointType obj, out System.Exception exception) {
            exception = null;
            obj = default(PointType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PointType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PointType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PointType object
        /// </summary>
        public virtual PointType Clone() {
            return ((PointType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("MultiGeometry", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiGeometryType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class MultiGeometryType : AbstractGeometryType {
        
        private List<AbstractGeometryType> itemsField;
        
        private List<string> multiGeometrySimpleExtensionGroupField;
        
        private List<AbstractObjectType> multiGeometryObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// MultiGeometryType class constructor
        /// </summary>
        public MultiGeometryType() {
            this.multiGeometryObjectExtensionGroupField = new List<AbstractObjectType>();
            this.multiGeometrySimpleExtensionGroupField = new List<string>();
            this.itemsField = new List<AbstractGeometryType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineString", typeof(LineStringType))]
        [System.Xml.Serialization.XmlElementAttribute("LinearRing", typeof(LinearRingType))]
        [System.Xml.Serialization.XmlElementAttribute("Model", typeof(ModelType))]
        [System.Xml.Serialization.XmlElementAttribute("MultiGeometry", typeof(MultiGeometryType))]
        [System.Xml.Serialization.XmlElementAttribute("Point", typeof(PointType))]
        [System.Xml.Serialization.XmlElementAttribute("Polygon", typeof(PolygonType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractGeometryType> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("MultiGeometrySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> MultiGeometrySimpleExtensionGroup {
            get {
                return this.multiGeometrySimpleExtensionGroupField;
            }
            set {
                this.multiGeometrySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("MultiGeometryObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> MultiGeometryObjectExtensionGroup {
            get {
                return this.multiGeometryObjectExtensionGroupField;
            }
            set {
                this.multiGeometryObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MultiGeometryType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MultiGeometryType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MultiGeometryType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MultiGeometryType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MultiGeometryType obj, out System.Exception exception) {
            exception = null;
            obj = default(MultiGeometryType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MultiGeometryType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MultiGeometryType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MultiGeometryType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MultiGeometryType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MultiGeometryType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MultiGeometryType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MultiGeometryType obj, out System.Exception exception) {
            exception = null;
            obj = default(MultiGeometryType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MultiGeometryType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MultiGeometryType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MultiGeometryType object
        /// </summary>
        public virtual MultiGeometryType Clone() {
            return ((MultiGeometryType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("SchemaData", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchemaDataType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SchemaDataType : AbstractObjectType {
        
        private List<SimpleDataType> simpleDataField;
        
        private List<object> schemaDataExtensionField;
        
        private string schemaUrlField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SchemaDataType class constructor
        /// </summary>
        public SchemaDataType() {
            this.schemaDataExtensionField = new List<object>();
            this.simpleDataField = new List<SimpleDataType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SimpleData")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SimpleDataType> SimpleData {
            get {
                return this.simpleDataField;
            }
            set {
                this.simpleDataField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SchemaDataExtension")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> SchemaDataExtension {
            get {
                return this.schemaDataExtensionField;
            }
            set {
                this.schemaDataExtensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string schemaUrl {
            get {
                return this.schemaUrlField;
            }
            set {
                this.schemaUrlField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SchemaDataType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SchemaDataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SchemaDataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SchemaDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SchemaDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(SchemaDataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SchemaDataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SchemaDataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SchemaDataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SchemaDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SchemaDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SchemaDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SchemaDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(SchemaDataType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SchemaDataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SchemaDataType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SchemaDataType object
        /// </summary>
        public virtual SchemaDataType Clone() {
            return ((SchemaDataType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("SimpleData", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleDataType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SimpleDataType {
        
        private string nameField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SimpleDataType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SimpleDataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SimpleDataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SimpleDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SimpleDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(SimpleDataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SimpleDataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SimpleDataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SimpleDataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SimpleDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SimpleDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SimpleDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SimpleDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(SimpleDataType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SimpleDataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SimpleDataType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SimpleDataType object
        /// </summary>
        public virtual SimpleDataType Clone() {
            return ((SimpleDataType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Data", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DataType : AbstractObjectType {
        
        private string displayNameField;
        
        private string valueField;
        
        private List<object> dataExtensionField;
        
        private string nameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DataType class constructor
        /// </summary>
        public DataType() {
            this.dataExtensionField = new List<object>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DataExtension")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> DataExtension {
            get {
                return this.dataExtensionField;
            }
            set {
                this.dataExtensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DataType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DataType obj, out System.Exception exception) {
            exception = null;
            obj = default(DataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DataType obj, out System.Exception exception) {
            exception = null;
            obj = default(DataType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DataType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DataType object
        /// </summary>
        public virtual DataType Clone() {
            return ((DataType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Lod", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LodType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LodType : AbstractObjectType {
        
        private double minLodPixelsField;
        
        private bool minLodPixelsFieldSpecified;
        
        private double maxLodPixelsField;
        
        private bool maxLodPixelsFieldSpecified;
        
        private double minFadeExtentField;
        
        private bool minFadeExtentFieldSpecified;
        
        private double maxFadeExtentField;
        
        private bool maxFadeExtentFieldSpecified;
        
        private List<string> lodSimpleExtensionGroupField;
        
        private List<AbstractObjectType> lodObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LodType() {
            this.lodObjectExtensionGroupField = new List<AbstractObjectType>();
            this.lodSimpleExtensionGroupField = new List<string>();
            this.minLodPixelsField = 0;
            this.maxLodPixelsField = -1;
            this.minFadeExtentField = 0;
            this.maxFadeExtentField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double minLodPixels {
            get {
                return this.minLodPixelsField;
            }
            set {
                this.minLodPixelsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool minLodPixelsSpecified {
            get {
                return this.minLodPixelsFieldSpecified;
            }
            set {
                this.minLodPixelsFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double maxLodPixels {
            get {
                return this.maxLodPixelsField;
            }
            set {
                this.maxLodPixelsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxLodPixelsSpecified {
            get {
                return this.maxLodPixelsFieldSpecified;
            }
            set {
                this.maxLodPixelsFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double minFadeExtent {
            get {
                return this.minFadeExtentField;
            }
            set {
                this.minFadeExtentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool minFadeExtentSpecified {
            get {
                return this.minFadeExtentFieldSpecified;
            }
            set {
                this.minFadeExtentFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double maxFadeExtent {
            get {
                return this.maxFadeExtentField;
            }
            set {
                this.maxFadeExtentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxFadeExtentSpecified {
            get {
                return this.maxFadeExtentFieldSpecified;
            }
            set {
                this.maxFadeExtentFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LodSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LodSimpleExtensionGroup {
            get {
                return this.lodSimpleExtensionGroupField;
            }
            set {
                this.lodSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LodObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LodObjectExtensionGroup {
            get {
                return this.lodObjectExtensionGroupField;
            }
            set {
                this.lodObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LodType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LodType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LodType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LodType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LodType obj, out System.Exception exception) {
            exception = null;
            obj = default(LodType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LodType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LodType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LodType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LodType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LodType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LodType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LodType obj, out System.Exception exception) {
            exception = null;
            obj = default(LodType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LodType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LodType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LodType object
        /// </summary>
        public virtual LodType Clone() {
            return ((LodType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LatLonBoxType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LatLonAltBoxType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/kml/2.2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractLatLonBoxType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractLatLonBoxType : AbstractObjectType {
        
        private double northField;
        
        private bool northFieldSpecified;
        
        private double southField;
        
        private bool southFieldSpecified;
        
        private double eastField;
        
        private bool eastFieldSpecified;
        
        private double westField;
        
        private bool westFieldSpecified;
        
        private List<string> abstractLatLonBoxSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractLatLonBoxObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public AbstractLatLonBoxType() {
            this.abstractLatLonBoxObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractLatLonBoxSimpleExtensionGroupField = new List<string>();
            this.northField = 180;
            this.southField = -180;
            this.eastField = 180;
            this.westField = -180;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double north {
            get {
                return this.northField;
            }
            set {
                this.northField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool northSpecified {
            get {
                return this.northFieldSpecified;
            }
            set {
                this.northFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double south {
            get {
                return this.southField;
            }
            set {
                this.southField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool southSpecified {
            get {
                return this.southFieldSpecified;
            }
            set {
                this.southFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double east {
            get {
                return this.eastField;
            }
            set {
                this.eastField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool eastSpecified {
            get {
                return this.eastFieldSpecified;
            }
            set {
                this.eastFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double west {
            get {
                return this.westField;
            }
            set {
                this.westField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool westSpecified {
            get {
                return this.westFieldSpecified;
            }
            set {
                this.westFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractLatLonBoxSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractLatLonBoxSimpleExtensionGroup {
            get {
                return this.abstractLatLonBoxSimpleExtensionGroupField;
            }
            set {
                this.abstractLatLonBoxSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractLatLonBoxObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractLatLonBoxObjectExtensionGroup {
            get {
                return this.abstractLatLonBoxObjectExtensionGroupField;
            }
            set {
                this.abstractLatLonBoxObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractLatLonBoxType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractLatLonBoxType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractLatLonBoxType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractLatLonBoxType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractLatLonBoxType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractLatLonBoxType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractLatLonBoxType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractLatLonBoxType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractLatLonBoxType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractLatLonBoxType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractLatLonBoxType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractLatLonBoxType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractLatLonBoxType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractLatLonBoxType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractLatLonBoxType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractLatLonBoxType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractLatLonBoxType object
        /// </summary>
        public virtual AbstractLatLonBoxType Clone() {
            return ((AbstractLatLonBoxType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LatLonBox", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LatLonBoxType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LatLonBoxType : AbstractLatLonBoxType {
        
        private double rotationField;
        
        private bool rotationFieldSpecified;
        
        private List<string> latLonBoxSimpleExtensionGroupField;
        
        private List<AbstractObjectType> latLonBoxObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LatLonBoxType() {
            this.latLonBoxObjectExtensionGroupField = new List<AbstractObjectType>();
            this.latLonBoxSimpleExtensionGroupField = new List<string>();
            this.rotationField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rotation {
            get {
                return this.rotationField;
            }
            set {
                this.rotationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rotationSpecified {
            get {
                return this.rotationFieldSpecified;
            }
            set {
                this.rotationFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LatLonBoxSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LatLonBoxSimpleExtensionGroup {
            get {
                return this.latLonBoxSimpleExtensionGroupField;
            }
            set {
                this.latLonBoxSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LatLonBoxObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LatLonBoxObjectExtensionGroup {
            get {
                return this.latLonBoxObjectExtensionGroupField;
            }
            set {
                this.latLonBoxObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LatLonBoxType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LatLonBoxType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LatLonBoxType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LatLonBoxType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LatLonBoxType obj, out System.Exception exception) {
            exception = null;
            obj = default(LatLonBoxType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LatLonBoxType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LatLonBoxType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LatLonBoxType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LatLonBoxType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LatLonBoxType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LatLonBoxType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LatLonBoxType obj, out System.Exception exception) {
            exception = null;
            obj = default(LatLonBoxType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LatLonBoxType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LatLonBoxType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LatLonBoxType object
        /// </summary>
        public virtual LatLonBoxType Clone() {
            return ((LatLonBoxType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LatLonAltBox", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LatLonAltBoxType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LatLonAltBoxType : AbstractLatLonBoxType {
        
        private double minAltitudeField;
        
        private bool minAltitudeFieldSpecified;
        
        private double maxAltitudeField;
        
        private bool maxAltitudeFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private List<string> latLonAltBoxSimpleExtensionGroupField;
        
        private List<AbstractObjectType> latLonAltBoxObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LatLonAltBoxType() {
            this.latLonAltBoxObjectExtensionGroupField = new List<AbstractObjectType>();
            this.latLonAltBoxSimpleExtensionGroupField = new List<string>();
            this.minAltitudeField = 0;
            this.maxAltitudeField = 0;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double minAltitude {
            get {
                return this.minAltitudeField;
            }
            set {
                this.minAltitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool minAltitudeSpecified {
            get {
                return this.minAltitudeFieldSpecified;
            }
            set {
                this.minAltitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double maxAltitude {
            get {
                return this.maxAltitudeField;
            }
            set {
                this.maxAltitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxAltitudeSpecified {
            get {
                return this.maxAltitudeFieldSpecified;
            }
            set {
                this.maxAltitudeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LatLonAltBoxSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LatLonAltBoxSimpleExtensionGroup {
            get {
                return this.latLonAltBoxSimpleExtensionGroupField;
            }
            set {
                this.latLonAltBoxSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LatLonAltBoxObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LatLonAltBoxObjectExtensionGroup {
            get {
                return this.latLonAltBoxObjectExtensionGroupField;
            }
            set {
                this.latLonAltBoxObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LatLonAltBoxType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LatLonAltBoxType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LatLonAltBoxType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LatLonAltBoxType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LatLonAltBoxType obj, out System.Exception exception) {
            exception = null;
            obj = default(LatLonAltBoxType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LatLonAltBoxType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LatLonAltBoxType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LatLonAltBoxType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LatLonAltBoxType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LatLonAltBoxType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LatLonAltBoxType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LatLonAltBoxType obj, out System.Exception exception) {
            exception = null;
            obj = default(LatLonAltBoxType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LatLonAltBoxType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LatLonAltBoxType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LatLonAltBoxType object
        /// </summary>
        public virtual LatLonAltBoxType Clone() {
            return ((LatLonAltBoxType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Region", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegionType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class RegionType : AbstractObjectType {
        
        private LatLonAltBoxType latLonAltBoxField;
        
        private LodType lodField;
        
        private List<string> regionSimpleExtensionGroupField;
        
        private List<AbstractObjectType> regionObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// RegionType class constructor
        /// </summary>
        public RegionType() {
            this.regionObjectExtensionGroupField = new List<AbstractObjectType>();
            this.regionSimpleExtensionGroupField = new List<string>();
            this.lodField = new LodType();
            this.latLonAltBoxField = new LatLonAltBoxType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LatLonAltBoxType LatLonAltBox {
            get {
                return this.latLonAltBoxField;
            }
            set {
                this.latLonAltBoxField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LodType Lod {
            get {
                return this.lodField;
            }
            set {
                this.lodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RegionSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> RegionSimpleExtensionGroup {
            get {
                return this.regionSimpleExtensionGroupField;
            }
            set {
                this.regionSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RegionObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> RegionObjectExtensionGroup {
            get {
                return this.regionObjectExtensionGroupField;
            }
            set {
                this.regionObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RegionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RegionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RegionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RegionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RegionType obj, out System.Exception exception) {
            exception = null;
            obj = default(RegionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RegionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RegionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RegionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RegionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RegionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RegionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RegionType obj, out System.Exception exception) {
            exception = null;
            obj = default(RegionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RegionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RegionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this RegionType object
        /// </summary>
        public virtual RegionType Clone() {
            return ((RegionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Pair", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PairType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PairType : AbstractObjectType {
        
        private styleStateEnumType keyField;
        
        private bool keyFieldSpecified;
        
        private string styleUrlField;
        
        private List<string> pairSimpleExtensionGroupField;
        
        private List<AbstractObjectType> pairObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlElementAttribute("Style",typeof(StyleType))]
    [System.Xml.Serialization.XmlElementAttribute("StyleMap",typeof(StyleMapType))]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public AbstractStyleSelectorType Item {get; set;}

        
        public PairType() {
            this.pairObjectExtensionGroupField = new List<AbstractObjectType>();
            this.pairSimpleExtensionGroupField = new List<string>();
            this.keyField = styleStateEnumType.normal;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public styleStateEnumType key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool keySpecified {
            get {
                return this.keyFieldSpecified;
            }
            set {
                this.keyFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string styleUrl {
            get {
                return this.styleUrlField;
            }
            set {
                this.styleUrlField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PairSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> PairSimpleExtensionGroup {
            get {
                return this.pairSimpleExtensionGroupField;
            }
            set {
                this.pairSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PairObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> PairObjectExtensionGroup {
            get {
                return this.pairObjectExtensionGroupField;
            }
            set {
                this.pairObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PairType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PairType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PairType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PairType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PairType obj, out System.Exception exception) {
            exception = null;
            obj = default(PairType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PairType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PairType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PairType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PairType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PairType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PairType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PairType obj, out System.Exception exception) {
            exception = null;
            obj = default(PairType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PairType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PairType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PairType object
        /// </summary>
        public virtual PairType Clone() {
            return ((PairType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("key", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum styleStateEnumType {
        
        /// <remarks/>
        normal,
        
        /// <remarks/>
        highlight,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Style", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="StyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class StyleType : AbstractStyleSelectorType {
        
        private IconStyleType iconStyleField;
        
        private LabelStyleType labelStyleField;
        
        private LineStyleType lineStyleField;
        
        private PolyStyleType polyStyleField;
        
        private BalloonStyleType balloonStyleField;
        
        private ListStyleType listStyleField;
        
        private List<string> styleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> styleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// StyleType class constructor
        /// </summary>
        public StyleType() {
            this.styleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.styleSimpleExtensionGroupField = new List<string>();
            this.listStyleField = new ListStyleType();
            this.balloonStyleField = new BalloonStyleType();
            this.polyStyleField = new PolyStyleType();
            this.lineStyleField = new LineStyleType();
            this.labelStyleField = new LabelStyleType();
            this.iconStyleField = new IconStyleType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public IconStyleType IconStyle {
            get {
                return this.iconStyleField;
            }
            set {
                this.iconStyleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabelStyleType LabelStyle {
            get {
                return this.labelStyleField;
            }
            set {
                this.labelStyleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LineStyleType LineStyle {
            get {
                return this.lineStyleField;
            }
            set {
                this.lineStyleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PolyStyleType PolyStyle {
            get {
                return this.polyStyleField;
            }
            set {
                this.polyStyleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BalloonStyleType BalloonStyle {
            get {
                return this.balloonStyleField;
            }
            set {
                this.balloonStyleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ListStyleType ListStyle {
            get {
                return this.listStyleField;
            }
            set {
                this.listStyleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("StyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> StyleSimpleExtensionGroup {
            get {
                return this.styleSimpleExtensionGroupField;
            }
            set {
                this.styleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("StyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> StyleObjectExtensionGroup {
            get {
                return this.styleObjectExtensionGroupField;
            }
            set {
                this.styleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(StyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an StyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output StyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out StyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(StyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out StyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static StyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((StyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current StyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an StyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(StyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out StyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static StyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this StyleType object
        /// </summary>
        public virtual StyleType Clone() {
            return ((StyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("IconStyle", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="IconStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class IconStyleType : AbstractColorStyleType {
        
        private double scaleField;
        
        private bool scaleFieldSpecified;
        
        private double headingField;
        
        private bool headingFieldSpecified;
        
        private BasicLinkType iconField;
        
        private vec2Type hotSpotField;
        
        private List<string> iconStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> iconStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public IconStyleType() {
            this.iconStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.iconStyleSimpleExtensionGroupField = new List<string>();
            this.hotSpotField = new vec2Type();
            this.iconField = new BasicLinkType();
            this.scaleField = 1;
            this.headingField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double scale {
            get {
                return this.scaleField;
            }
            set {
                this.scaleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool scaleSpecified {
            get {
                return this.scaleFieldSpecified;
            }
            set {
                this.scaleFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double heading {
            get {
                return this.headingField;
            }
            set {
                this.headingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool headingSpecified {
            get {
                return this.headingFieldSpecified;
            }
            set {
                this.headingFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BasicLinkType Icon {
            get {
                return this.iconField;
            }
            set {
                this.iconField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public vec2Type hotSpot {
            get {
                return this.hotSpotField;
            }
            set {
                this.hotSpotField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("IconStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> IconStyleSimpleExtensionGroup {
            get {
                return this.iconStyleSimpleExtensionGroupField;
            }
            set {
                this.iconStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("IconStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> IconStyleObjectExtensionGroup {
            get {
                return this.iconStyleObjectExtensionGroupField;
            }
            set {
                this.iconStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IconStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IconStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IconStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IconStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IconStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(IconStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IconStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IconStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((IconStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current IconStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an IconStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IconStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IconStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(IconStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out IconStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static IconStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this IconStyleType object
        /// </summary>
        public virtual IconStyleType Clone() {
            return ((IconStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("hotSpot", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="vec2Type", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class vec2Type {
        
        private double xField;
        
        private double yField;
        
        private unitsEnumType xunitsField;
        
        private unitsEnumType yunitsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public vec2Type() {
            this.xField = 1;
            this.yField = 1;
            this.xunitsField = unitsEnumType.fraction;
            this.yunitsField = unitsEnumType.fraction;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(1)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(unitsEnumType.fraction)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public unitsEnumType xunits {
            get {
                return this.xunitsField;
            }
            set {
                this.xunitsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(unitsEnumType.fraction)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public unitsEnumType yunits {
            get {
                return this.yunitsField;
            }
            set {
                this.yunitsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(vec2Type));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current vec2Type object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an vec2Type object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output vec2Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out vec2Type obj, out System.Exception exception) {
            exception = null;
            obj = default(vec2Type);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out vec2Type obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static vec2Type Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((vec2Type)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current vec2Type object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an vec2Type object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output vec2Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out vec2Type obj, out System.Exception exception) {
            exception = null;
            obj = default(vec2Type);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out vec2Type obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static vec2Type LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this vec2Type object
        /// </summary>
        public virtual vec2Type Clone() {
            return ((vec2Type)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    public enum unitsEnumType {
        
        /// <remarks/>
        fraction,
        
        /// <remarks/>
        pixels,
        
        /// <remarks/>
        insetPixels,
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolyStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LabelStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IconStyleType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractColorStyleGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractColorStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractColorStyleType : AbstractSubStyleType {
        
        private byte[] colorField;
        
        private colorModeEnumType colorModeField;
        
        private bool colorModeFieldSpecified;
        
        private List<string> abstractColorStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractColorStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public AbstractColorStyleType() {
            this.abstractColorStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractColorStyleSimpleExtensionGroupField = new List<string>();
            this.colorField = new byte[0];
            this.colorModeField = colorModeEnumType.normal;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public colorModeEnumType colorMode {
            get {
                return this.colorModeField;
            }
            set {
                this.colorModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool colorModeSpecified {
            get {
                return this.colorModeFieldSpecified;
            }
            set {
                this.colorModeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractColorStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractColorStyleSimpleExtensionGroup {
            get {
                return this.abstractColorStyleSimpleExtensionGroupField;
            }
            set {
                this.abstractColorStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractColorStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractColorStyleObjectExtensionGroup {
            get {
                return this.abstractColorStyleObjectExtensionGroupField;
            }
            set {
                this.abstractColorStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractColorStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractColorStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractColorStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractColorStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractColorStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractColorStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractColorStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractColorStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractColorStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractColorStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractColorStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractColorStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractColorStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractColorStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractColorStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractColorStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractColorStyleType object
        /// </summary>
        public virtual AbstractColorStyleType Clone() {
            return ((AbstractColorStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("colorMode", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum colorModeEnumType {
        
        /// <remarks/>
        normal,
        
        /// <remarks/>
        random,
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ListStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BalloonStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColorStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolyStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LineStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LabelStyleType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IconStyleType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractSubStyleGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractSubStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractSubStyleType : AbstractObjectType {
        
        private List<string> abstractSubStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractSubStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractSubStyleType class constructor
        /// </summary>
        public AbstractSubStyleType() {
            this.abstractSubStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractSubStyleSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractSubStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractSubStyleSimpleExtensionGroup {
            get {
                return this.abstractSubStyleSimpleExtensionGroupField;
            }
            set {
                this.abstractSubStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractSubStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractSubStyleObjectExtensionGroup {
            get {
                return this.abstractSubStyleObjectExtensionGroupField;
            }
            set {
                this.abstractSubStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractSubStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractSubStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractSubStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractSubStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractSubStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractSubStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractSubStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractSubStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractSubStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractSubStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractSubStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractSubStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractSubStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractSubStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractSubStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractSubStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractSubStyleType object
        /// </summary>
        public virtual AbstractSubStyleType Clone() {
            return ((AbstractSubStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ListStyle", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ListStyleType : AbstractSubStyleType {
        
        private listItemTypeEnumType listItemTypeField;
        
        private bool listItemTypeFieldSpecified;
        
        private byte[] bgColorField;
        
        private List<ItemIconType> itemIconField;
        
        private int maxSnippetLinesField;
        
        private bool maxSnippetLinesFieldSpecified;
        
        private List<string> listStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> listStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ListStyleType() {
            this.listStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.listStyleSimpleExtensionGroupField = new List<string>();
            this.itemIconField = new List<ItemIconType>();
            this.bgColorField = new byte[0];
            this.listItemTypeField = listItemTypeEnumType.check;
            this.maxSnippetLinesField = 2;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public listItemTypeEnumType listItemType {
            get {
                return this.listItemTypeField;
            }
            set {
                this.listItemTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool listItemTypeSpecified {
            get {
                return this.listItemTypeFieldSpecified;
            }
            set {
                this.listItemTypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] bgColor {
            get {
                return this.bgColorField;
            }
            set {
                this.bgColorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemIcon")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ItemIconType> ItemIcon {
            get {
                return this.itemIconField;
            }
            set {
                this.itemIconField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int maxSnippetLines {
            get {
                return this.maxSnippetLinesField;
            }
            set {
                this.maxSnippetLinesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxSnippetLinesSpecified {
            get {
                return this.maxSnippetLinesFieldSpecified;
            }
            set {
                this.maxSnippetLinesFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ListStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ListStyleSimpleExtensionGroup {
            get {
                return this.listStyleSimpleExtensionGroupField;
            }
            set {
                this.listStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ListStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ListStyleObjectExtensionGroup {
            get {
                return this.listStyleObjectExtensionGroupField;
            }
            set {
                this.listStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ListStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ListStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ListStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ListStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ListStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(ListStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ListStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ListStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ListStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ListStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ListStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ListStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ListStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(ListStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ListStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ListStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ListStyleType object
        /// </summary>
        public virtual ListStyleType Clone() {
            return ((ListStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("listItemType", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum listItemTypeEnumType {
        
        /// <remarks/>
        radioFolder,
        
        /// <remarks/>
        check,
        
        /// <remarks/>
        checkHideChildren,
        
        /// <remarks/>
        checkOffOnly,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ItemIcon", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemIconType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ItemIconType : AbstractObjectType {
        
        private string stateField;
        
        private string hrefField;
        
        private List<string> itemIconSimpleExtensionGroupField;
        
        private List<AbstractObjectType> itemIconObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ItemIconType class constructor
        /// </summary>
        public ItemIconType() {
            this.itemIconObjectExtensionGroupField = new List<AbstractObjectType>();
            this.itemIconSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string href {
            get {
                return this.hrefField;
            }
            set {
                this.hrefField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemIconSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ItemIconSimpleExtensionGroup {
            get {
                return this.itemIconSimpleExtensionGroupField;
            }
            set {
                this.itemIconSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemIconObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ItemIconObjectExtensionGroup {
            get {
                return this.itemIconObjectExtensionGroupField;
            }
            set {
                this.itemIconObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ItemIconType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ItemIconType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ItemIconType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ItemIconType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ItemIconType obj, out System.Exception exception) {
            exception = null;
            obj = default(ItemIconType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ItemIconType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ItemIconType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ItemIconType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ItemIconType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ItemIconType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ItemIconType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ItemIconType obj, out System.Exception exception) {
            exception = null;
            obj = default(ItemIconType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ItemIconType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ItemIconType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ItemIconType object
        /// </summary>
        public virtual ItemIconType Clone() {
            return ((ItemIconType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("BalloonStyle", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="BalloonStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class BalloonStyleType : AbstractSubStyleType {
        
        private byte[] itemField;
        
        private byte[] textColorField;
        
        private string textField;
        
        private displayModeEnumType displayModeField;
        
        private bool displayModeFieldSpecified;
        
        private List<string> balloonStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> balloonStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ItemChoiceType ItemElementName {get; set;}

        
        public BalloonStyleType() {
            this.balloonStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.balloonStyleSimpleExtensionGroupField = new List<string>();
            this.textColorField = new byte[0];
            this.itemField = new byte[0];
            this.displayModeField = displayModeEnumType.@default;
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bgColor", typeof(byte[]), DataType="hexBinary")]
        [System.Xml.Serialization.XmlElementAttribute("color", typeof(byte[]), DataType="hexBinary")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] textColor {
            get {
                return this.textColorField;
            }
            set {
                this.textColorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public displayModeEnumType displayMode {
            get {
                return this.displayModeField;
            }
            set {
                this.displayModeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool displayModeSpecified {
            get {
                return this.displayModeFieldSpecified;
            }
            set {
                this.displayModeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BalloonStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> BalloonStyleSimpleExtensionGroup {
            get {
                return this.balloonStyleSimpleExtensionGroupField;
            }
            set {
                this.balloonStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BalloonStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> BalloonStyleObjectExtensionGroup {
            get {
                return this.balloonStyleObjectExtensionGroupField;
            }
            set {
                this.balloonStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BalloonStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BalloonStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BalloonStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BalloonStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BalloonStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(BalloonStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BalloonStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BalloonStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BalloonStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BalloonStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BalloonStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BalloonStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BalloonStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(BalloonStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BalloonStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BalloonStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this BalloonStyleType object
        /// </summary>
        public virtual BalloonStyleType Clone() {
            return ((BalloonStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2", IncludeInSchema=false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        bgColor,
        
        /// <remarks/>
        color,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("displayMode", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum displayModeEnumType {
        
        /// <remarks/>
        @default,
        
        /// <remarks/>
        hide,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("PolyStyle", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PolyStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PolyStyleType : AbstractColorStyleType {
        
        private bool fillField;
        
        private bool fillFieldSpecified;
        
        private bool outlineField;
        
        private bool outlineFieldSpecified;
        
        private List<string> polyStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> polyStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PolyStyleType() {
            this.polyStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.polyStyleSimpleExtensionGroupField = new List<string>();
            this.fillField = true;
            this.outlineField = true;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fill {
            get {
                return this.fillField;
            }
            set {
                this.fillField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool fillSpecified {
            get {
                return this.fillFieldSpecified;
            }
            set {
                this.fillFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool outline {
            get {
                return this.outlineField;
            }
            set {
                this.outlineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool outlineSpecified {
            get {
                return this.outlineFieldSpecified;
            }
            set {
                this.outlineFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PolyStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> PolyStyleSimpleExtensionGroup {
            get {
                return this.polyStyleSimpleExtensionGroupField;
            }
            set {
                this.polyStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PolyStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> PolyStyleObjectExtensionGroup {
            get {
                return this.polyStyleObjectExtensionGroupField;
            }
            set {
                this.polyStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PolyStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PolyStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PolyStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PolyStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PolyStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(PolyStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PolyStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PolyStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PolyStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PolyStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PolyStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PolyStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PolyStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(PolyStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PolyStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PolyStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PolyStyleType object
        /// </summary>
        public virtual PolyStyleType Clone() {
            return ((PolyStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LineStyle", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LineStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LineStyleType : AbstractColorStyleType {
        
        private double widthField;
        
        private bool widthFieldSpecified;
        
        private List<string> lineStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> lineStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LineStyleType() {
            this.lineStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.lineStyleSimpleExtensionGroupField = new List<string>();
            this.widthField = 1;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool widthSpecified {
            get {
                return this.widthFieldSpecified;
            }
            set {
                this.widthFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LineStyleSimpleExtensionGroup {
            get {
                return this.lineStyleSimpleExtensionGroupField;
            }
            set {
                this.lineStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LineStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LineStyleObjectExtensionGroup {
            get {
                return this.lineStyleObjectExtensionGroupField;
            }
            set {
                this.lineStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LineStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LineStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LineStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LineStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LineStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LineStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LineStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LineStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LineStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LineStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LineStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LineStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LineStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LineStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LineStyleType object
        /// </summary>
        public virtual LineStyleType Clone() {
            return ((LineStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LabelStyle", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LabelStyleType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LabelStyleType : AbstractColorStyleType {
        
        private double scaleField;
        
        private bool scaleFieldSpecified;
        
        private List<string> labelStyleSimpleExtensionGroupField;
        
        private List<AbstractObjectType> labelStyleObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LabelStyleType() {
            this.labelStyleObjectExtensionGroupField = new List<AbstractObjectType>();
            this.labelStyleSimpleExtensionGroupField = new List<string>();
            this.scaleField = 1;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double scale {
            get {
                return this.scaleField;
            }
            set {
                this.scaleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool scaleSpecified {
            get {
                return this.scaleFieldSpecified;
            }
            set {
                this.scaleFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LabelStyleSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LabelStyleSimpleExtensionGroup {
            get {
                return this.labelStyleSimpleExtensionGroupField;
            }
            set {
                this.labelStyleSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LabelStyleObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LabelStyleObjectExtensionGroup {
            get {
                return this.labelStyleObjectExtensionGroupField;
            }
            set {
                this.labelStyleObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LabelStyleType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LabelStyleType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LabelStyleType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LabelStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LabelStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LabelStyleType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LabelStyleType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LabelStyleType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LabelStyleType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LabelStyleType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LabelStyleType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LabelStyleType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LabelStyleType obj, out System.Exception exception) {
            exception = null;
            obj = default(LabelStyleType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LabelStyleType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LabelStyleType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LabelStyleType object
        /// </summary>
        public virtual LabelStyleType Clone() {
            return ((LabelStyleType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StyleMapType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StyleType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractStyleSelectorGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractStyleSelectorType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractStyleSelectorType : AbstractObjectType {
        
        private List<string> abstractStyleSelectorSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractStyleSelectorObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractStyleSelectorType class constructor
        /// </summary>
        public AbstractStyleSelectorType() {
            this.abstractStyleSelectorObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractStyleSelectorSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractStyleSelectorSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractStyleSelectorSimpleExtensionGroup {
            get {
                return this.abstractStyleSelectorSimpleExtensionGroupField;
            }
            set {
                this.abstractStyleSelectorSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractStyleSelectorObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractStyleSelectorObjectExtensionGroup {
            get {
                return this.abstractStyleSelectorObjectExtensionGroupField;
            }
            set {
                this.abstractStyleSelectorObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractStyleSelectorType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractStyleSelectorType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractStyleSelectorType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractStyleSelectorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractStyleSelectorType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractStyleSelectorType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractStyleSelectorType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractStyleSelectorType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractStyleSelectorType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractStyleSelectorType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractStyleSelectorType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractStyleSelectorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractStyleSelectorType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractStyleSelectorType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractStyleSelectorType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractStyleSelectorType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractStyleSelectorType object
        /// </summary>
        public virtual AbstractStyleSelectorType Clone() {
            return ((AbstractStyleSelectorType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("StyleMap", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="StyleMapType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class StyleMapType : AbstractStyleSelectorType {
        
        private List<PairType> pairField;
        
        private List<string> styleMapSimpleExtensionGroupField;
        
        private List<AbstractObjectType> styleMapObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// StyleMapType class constructor
        /// </summary>
        public StyleMapType() {
            this.styleMapObjectExtensionGroupField = new List<AbstractObjectType>();
            this.styleMapSimpleExtensionGroupField = new List<string>();
            this.pairField = new List<PairType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Pair")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PairType> Pair {
            get {
                return this.pairField;
            }
            set {
                this.pairField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("StyleMapSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> StyleMapSimpleExtensionGroup {
            get {
                return this.styleMapSimpleExtensionGroupField;
            }
            set {
                this.styleMapSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("StyleMapObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> StyleMapObjectExtensionGroup {
            get {
                return this.styleMapObjectExtensionGroupField;
            }
            set {
                this.styleMapObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(StyleMapType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StyleMapType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an StyleMapType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output StyleMapType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out StyleMapType obj, out System.Exception exception) {
            exception = null;
            obj = default(StyleMapType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out StyleMapType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static StyleMapType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((StyleMapType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current StyleMapType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an StyleMapType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StyleMapType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out StyleMapType obj, out System.Exception exception) {
            exception = null;
            obj = default(StyleMapType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out StyleMapType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static StyleMapType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this StyleMapType object
        /// </summary>
        public virtual StyleMapType Clone() {
            return ((StyleMapType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSpanType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeStampType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitiveGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractTimePrimitiveType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractTimePrimitiveType : AbstractObjectType {
        
        private List<string> abstractTimePrimitiveSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractTimePrimitiveObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractTimePrimitiveType class constructor
        /// </summary>
        public AbstractTimePrimitiveType() {
            this.abstractTimePrimitiveObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractTimePrimitiveSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractTimePrimitiveSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractTimePrimitiveSimpleExtensionGroup {
            get {
                return this.abstractTimePrimitiveSimpleExtensionGroupField;
            }
            set {
                this.abstractTimePrimitiveSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractTimePrimitiveObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractTimePrimitiveObjectExtensionGroup {
            get {
                return this.abstractTimePrimitiveObjectExtensionGroupField;
            }
            set {
                this.abstractTimePrimitiveObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractTimePrimitiveType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractTimePrimitiveType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractTimePrimitiveType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractTimePrimitiveType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractTimePrimitiveType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractTimePrimitiveType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractTimePrimitiveType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractTimePrimitiveType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractTimePrimitiveType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractTimePrimitiveType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractTimePrimitiveType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractTimePrimitiveType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractTimePrimitiveType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractTimePrimitiveType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractTimePrimitiveType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractTimePrimitiveType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractTimePrimitiveType object
        /// </summary>
        public virtual AbstractTimePrimitiveType Clone() {
            return ((AbstractTimePrimitiveType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("TimeSpan", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeSpanType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class TimeSpanType : AbstractTimePrimitiveType {
        
        private string beginField;
        
        private string endField;
        
        private List<string> timeSpanSimpleExtensionGroupField;
        
        private List<AbstractObjectType> timeSpanObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// TimeSpanType class constructor
        /// </summary>
        public TimeSpanType() {
            this.timeSpanObjectExtensionGroupField = new List<AbstractObjectType>();
            this.timeSpanSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string begin {
            get {
                return this.beginField;
            }
            set {
                this.beginField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string end {
            get {
                return this.endField;
            }
            set {
                this.endField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeSpanSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> TimeSpanSimpleExtensionGroup {
            get {
                return this.timeSpanSimpleExtensionGroupField;
            }
            set {
                this.timeSpanSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeSpanObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> TimeSpanObjectExtensionGroup {
            get {
                return this.timeSpanObjectExtensionGroupField;
            }
            set {
                this.timeSpanObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TimeSpanType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TimeSpanType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TimeSpanType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TimeSpanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TimeSpanType obj, out System.Exception exception) {
            exception = null;
            obj = default(TimeSpanType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TimeSpanType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TimeSpanType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TimeSpanType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TimeSpanType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TimeSpanType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TimeSpanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TimeSpanType obj, out System.Exception exception) {
            exception = null;
            obj = default(TimeSpanType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TimeSpanType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TimeSpanType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TimeSpanType object
        /// </summary>
        public virtual TimeSpanType Clone() {
            return ((TimeSpanType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("TimeStamp", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeStampType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class TimeStampType : AbstractTimePrimitiveType {
        
        private string whenField;
        
        private List<string> timeStampSimpleExtensionGroupField;
        
        private List<AbstractObjectType> timeStampObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// TimeStampType class constructor
        /// </summary>
        public TimeStampType() {
            this.timeStampObjectExtensionGroupField = new List<AbstractObjectType>();
            this.timeStampSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string when {
            get {
                return this.whenField;
            }
            set {
                this.whenField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeStampSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> TimeStampSimpleExtensionGroup {
            get {
                return this.timeStampSimpleExtensionGroupField;
            }
            set {
                this.timeStampSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("TimeStampObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> TimeStampObjectExtensionGroup {
            get {
                return this.timeStampObjectExtensionGroupField;
            }
            set {
                this.timeStampObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TimeStampType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TimeStampType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TimeStampType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TimeStampType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TimeStampType obj, out System.Exception exception) {
            exception = null;
            obj = default(TimeStampType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TimeStampType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TimeStampType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TimeStampType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TimeStampType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TimeStampType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TimeStampType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TimeStampType obj, out System.Exception exception) {
            exception = null;
            obj = default(TimeStampType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TimeStampType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TimeStampType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this TimeStampType object
        /// </summary>
        public virtual TimeStampType Clone() {
            return ((TimeStampType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CameraType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LookAtType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractViewGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractViewType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractViewType : AbstractObjectType {
        
        private List<string> abstractViewSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractViewObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractViewType class constructor
        /// </summary>
        public AbstractViewType() {
            this.abstractViewObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractViewSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractViewSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractViewSimpleExtensionGroup {
            get {
                return this.abstractViewSimpleExtensionGroupField;
            }
            set {
                this.abstractViewSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractViewObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractViewObjectExtensionGroup {
            get {
                return this.abstractViewObjectExtensionGroupField;
            }
            set {
                this.abstractViewObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractViewType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractViewType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractViewType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractViewType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractViewType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractViewType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractViewType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractViewType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractViewType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractViewType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractViewType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractViewType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractViewType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractViewType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractViewType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractViewType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractViewType object
        /// </summary>
        public virtual AbstractViewType Clone() {
            return ((AbstractViewType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Camera", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="CameraType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class CameraType : AbstractViewType {
        
        private double longitudeField;
        
        private bool longitudeFieldSpecified;
        
        private double latitudeField;
        
        private bool latitudeFieldSpecified;
        
        private double altitudeField;
        
        private bool altitudeFieldSpecified;
        
        private double headingField;
        
        private bool headingFieldSpecified;
        
        private double tiltField;
        
        private bool tiltFieldSpecified;
        
        private double rollField;
        
        private bool rollFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private List<string> cameraSimpleExtensionGroupField;
        
        private List<AbstractObjectType> cameraObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public CameraType() {
            this.cameraObjectExtensionGroupField = new List<AbstractObjectType>();
            this.cameraSimpleExtensionGroupField = new List<string>();
            this.longitudeField = 0;
            this.latitudeField = 0;
            this.altitudeField = 0;
            this.headingField = 0;
            this.tiltField = 0;
            this.rollField = 0;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool longitudeSpecified {
            get {
                return this.longitudeFieldSpecified;
            }
            set {
                this.longitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool latitudeSpecified {
            get {
                return this.latitudeFieldSpecified;
            }
            set {
                this.latitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double altitude {
            get {
                return this.altitudeField;
            }
            set {
                this.altitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool altitudeSpecified {
            get {
                return this.altitudeFieldSpecified;
            }
            set {
                this.altitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double heading {
            get {
                return this.headingField;
            }
            set {
                this.headingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool headingSpecified {
            get {
                return this.headingFieldSpecified;
            }
            set {
                this.headingFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double tilt {
            get {
                return this.tiltField;
            }
            set {
                this.tiltField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tiltSpecified {
            get {
                return this.tiltFieldSpecified;
            }
            set {
                this.tiltFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double roll {
            get {
                return this.rollField;
            }
            set {
                this.rollField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rollSpecified {
            get {
                return this.rollFieldSpecified;
            }
            set {
                this.rollFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CameraSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> CameraSimpleExtensionGroup {
            get {
                return this.cameraSimpleExtensionGroupField;
            }
            set {
                this.cameraSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CameraObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> CameraObjectExtensionGroup {
            get {
                return this.cameraObjectExtensionGroupField;
            }
            set {
                this.cameraObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CameraType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CameraType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CameraType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CameraType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CameraType obj, out System.Exception exception) {
            exception = null;
            obj = default(CameraType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CameraType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CameraType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CameraType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CameraType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CameraType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CameraType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CameraType obj, out System.Exception exception) {
            exception = null;
            obj = default(CameraType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CameraType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CameraType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CameraType object
        /// </summary>
        public virtual CameraType Clone() {
            return ((CameraType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("LookAt", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="LookAtType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LookAtType : AbstractViewType {
        
        private double longitudeField;
        
        private bool longitudeFieldSpecified;
        
        private double latitudeField;
        
        private bool latitudeFieldSpecified;
        
        private double altitudeField;
        
        private bool altitudeFieldSpecified;
        
        private double headingField;
        
        private bool headingFieldSpecified;
        
        private double tiltField;
        
        private bool tiltFieldSpecified;
        
        private double rangeField;
        
        private bool rangeFieldSpecified;
        
        private altitudeModeEnumType itemField;
        
        private List<string> lookAtSimpleExtensionGroupField;
        
        private List<AbstractObjectType> lookAtObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LookAtType() {
            this.lookAtObjectExtensionGroupField = new List<AbstractObjectType>();
            this.lookAtSimpleExtensionGroupField = new List<string>();
            this.longitudeField = 0;
            this.latitudeField = 0;
            this.altitudeField = 0;
            this.headingField = 0;
            this.tiltField = 0;
            this.rangeField = 0;
            this.itemField = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool longitudeSpecified {
            get {
                return this.longitudeFieldSpecified;
            }
            set {
                this.longitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool latitudeSpecified {
            get {
                return this.latitudeFieldSpecified;
            }
            set {
                this.latitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double altitude {
            get {
                return this.altitudeField;
            }
            set {
                this.altitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool altitudeSpecified {
            get {
                return this.altitudeFieldSpecified;
            }
            set {
                this.altitudeFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double heading {
            get {
                return this.headingField;
            }
            set {
                this.headingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool headingSpecified {
            get {
                return this.headingFieldSpecified;
            }
            set {
                this.headingFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double tilt {
            get {
                return this.tiltField;
            }
            set {
                this.tiltField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool tiltSpecified {
            get {
                return this.tiltFieldSpecified;
            }
            set {
                this.tiltFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double range {
            get {
                return this.rangeField;
            }
            set {
                this.rangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rangeSpecified {
            get {
                return this.rangeFieldSpecified;
            }
            set {
                this.rangeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LookAtSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> LookAtSimpleExtensionGroup {
            get {
                return this.lookAtSimpleExtensionGroupField;
            }
            set {
                this.lookAtSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LookAtObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> LookAtObjectExtensionGroup {
            get {
                return this.lookAtObjectExtensionGroupField;
            }
            set {
                this.lookAtObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LookAtType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LookAtType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LookAtType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LookAtType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LookAtType obj, out System.Exception exception) {
            exception = null;
            obj = default(LookAtType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LookAtType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LookAtType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LookAtType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LookAtType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LookAtType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LookAtType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LookAtType obj, out System.Exception exception) {
            exception = null;
            obj = default(LookAtType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LookAtType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LookAtType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LookAtType object
        /// </summary>
        public virtual LookAtType Clone() {
            return ((LookAtType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhotoOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroundOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NetworkLinkType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlacemarkType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractContainerType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FolderType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DocumentType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractFeatureGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractFeatureType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractFeatureType : AbstractObjectType {
        
        private string nameField;
        
        private bool visibilityField;
        
        private bool visibilityFieldSpecified;
        
        private bool openField;
        
        private bool openFieldSpecified;
        
        private atomPersonConstruct authorField;
        
        private link linkField;
        
        private string addressField;
        
        private AddressDetails addressDetailsField;
        
        private string phoneNumberField;
        
        private object itemField;
        
        private string descriptionField;
        
        private string styleUrlField;
        
        private List<AbstractStyleSelectorType> itemsField;
        
        private RegionType regionField;
        
        private object item3Field;
        
        private List<string> abstractFeatureSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractFeatureObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlElementAttribute("Camera",typeof(CameraType))]
    [System.Xml.Serialization.XmlElementAttribute("LookAt",typeof(LookAtType))]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public AbstractViewType Item1 {get; set;}

    [System.Xml.Serialization.XmlElementAttribute("TimeSpan",typeof(TimeSpanType))]
    [System.Xml.Serialization.XmlElementAttribute("TimeStamp",typeof(TimeStampType))]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public AbstractTimePrimitiveType Item2 {get; set;}

        
        public AbstractFeatureType() {
            this.abstractFeatureObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractFeatureSimpleExtensionGroupField = new List<string>();
            this.regionField = new RegionType();
            this.itemsField = new List<AbstractStyleSelectorType>();
            this.addressDetailsField = new AddressDetails();
            this.linkField = new link();
            this.authorField = new atomPersonConstruct();
            this.visibilityField = true;
            this.openField = false;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool visibilitySpecified {
            get {
                return this.visibilityFieldSpecified;
            }
            set {
                this.visibilityFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool open {
            get {
                return this.openField;
            }
            set {
                this.openField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool openSpecified {
            get {
                return this.openFieldSpecified;
            }
            set {
                this.openFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.w3.org/2005/Atom")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public atomPersonConstruct author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.w3.org/2005/Atom")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public link link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetails AddressDetails {
            get {
                return this.addressDetailsField;
            }
            set {
                this.addressDetailsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string phoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Snippet", typeof(SnippetType))]
        [System.Xml.Serialization.XmlElementAttribute("snippet", typeof(string))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string styleUrl {
            get {
                return this.styleUrlField;
            }
            set {
                this.styleUrlField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Style", typeof(StyleType))]
        [System.Xml.Serialization.XmlElementAttribute("StyleMap", typeof(StyleMapType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractStyleSelectorType> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RegionType Region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ExtendedData", typeof(ExtendedDataType))]
        [System.Xml.Serialization.XmlElementAttribute("Metadata", typeof(MetadataType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item3 {
            get {
                return this.item3Field;
            }
            set {
                this.item3Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractFeatureSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractFeatureSimpleExtensionGroup {
            get {
                return this.abstractFeatureSimpleExtensionGroupField;
            }
            set {
                this.abstractFeatureSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractFeatureObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractFeatureObjectExtensionGroup {
            get {
                return this.abstractFeatureObjectExtensionGroupField;
            }
            set {
                this.abstractFeatureObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractFeatureType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractFeatureType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractFeatureType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractFeatureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractFeatureType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractFeatureType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractFeatureType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractFeatureType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractFeatureType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractFeatureType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractFeatureType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractFeatureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractFeatureType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractFeatureType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractFeatureType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractFeatureType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractFeatureType object
        /// </summary>
        public virtual AbstractFeatureType Clone() {
            return ((AbstractFeatureType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2005/Atom")]
    [System.Runtime.Serialization.DataContractAttribute(Name="atomPersonConstruct", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class atomPersonConstruct {
        
        private List<string> itemsField;
        
        private List<ItemsChoiceType> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// atomPersonConstruct class constructor
        /// </summary>
        public atomPersonConstruct() {
            this.itemsElementNameField = new List<ItemsChoiceType>();
            this.itemsField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("name", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("uri", typeof(string))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ItemsChoiceType> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(atomPersonConstruct));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current atomPersonConstruct object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an atomPersonConstruct object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output atomPersonConstruct object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out atomPersonConstruct obj, out System.Exception exception) {
            exception = null;
            obj = default(atomPersonConstruct);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out atomPersonConstruct obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static atomPersonConstruct Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((atomPersonConstruct)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current atomPersonConstruct object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an atomPersonConstruct object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output atomPersonConstruct object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out atomPersonConstruct obj, out System.Exception exception) {
            exception = null;
            obj = default(atomPersonConstruct);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out atomPersonConstruct obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static atomPersonConstruct LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this atomPersonConstruct object
        /// </summary>
        public virtual atomPersonConstruct Clone() {
            return ((atomPersonConstruct)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2005/Atom", IncludeInSchema=false)]
    public enum ItemsChoiceType {
        
        /// <remarks/>
        email,
        
        /// <remarks/>
        name,
        
        /// <remarks/>
        uri,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.w3.org/2005/Atom")]
    [System.Runtime.Serialization.DataContractAttribute(Name="link", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class link {
        
        private string hrefField;
        
        private string relField;
        
        private string typeField;
        
        private string hreflangField;
        
        private string titleField;
        
        private string lengthField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string href {
            get {
                return this.hrefField;
            }
            set {
                this.hrefField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string rel {
            get {
                return this.relField;
            }
            set {
                this.relField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hreflang {
            get {
                return this.hreflangField;
            }
            set {
                this.hreflangField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(link));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current link object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an link object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output link object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out link obj, out System.Exception exception) {
            exception = null;
            obj = default(link);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out link obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static link Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((link)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current link object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an link object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output link object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out link obj, out System.Exception exception) {
            exception = null;
            obj = default(link);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out link obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static link LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this link object
        /// </summary>
        public virtual link Clone() {
            return ((link)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetails", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetails {
        
        private AddressDetailsPostalServiceElements postalServiceElementsField;
        
        private object itemField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string addressTypeField;
        
        private string currentStatusField;
        
        private string validFromDateField;
        
        private string validToDateField;
        
        private string usageField;
        
        private string codeField;
        
        private string addressDetailsKeyField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetails class constructor
        /// </summary>
        public AddressDetails() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalServiceElementsField = new AddressDetailsPostalServiceElements();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElements PostalServiceElements {
            get {
                return this.postalServiceElementsField;
            }
            set {
                this.postalServiceElementsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Address", typeof(AddressDetailsAddress))]
        [System.Xml.Serialization.XmlElementAttribute("AddressLines", typeof(AddressLinesType))]
        [System.Xml.Serialization.XmlElementAttribute("AdministrativeArea", typeof(AdministrativeArea))]
        [System.Xml.Serialization.XmlElementAttribute("Country", typeof(AddressDetailsCountry))]
        [System.Xml.Serialization.XmlElementAttribute("Locality", typeof(Locality))]
        [System.Xml.Serialization.XmlElementAttribute("Thoroughfare", typeof(Thoroughfare))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddressType {
            get {
                return this.addressTypeField;
            }
            set {
                this.addressTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentStatus {
            get {
                return this.currentStatusField;
            }
            set {
                this.currentStatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidFromDate {
            get {
                return this.validFromDateField;
            }
            set {
                this.validFromDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValidToDate {
            get {
                return this.validToDateField;
            }
            set {
                this.validToDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Usage {
            get {
                return this.usageField;
            }
            set {
                this.usageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddressDetailsKey {
            get {
                return this.addressDetailsKeyField;
            }
            set {
                this.addressDetailsKeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetails));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetails object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetails object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetails object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetails obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetails);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetails obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetails Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetails)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetails object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetails object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetails object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetails obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetails);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetails obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetails LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetails object
        /// </summary>
        public virtual AddressDetails Clone() {
            return ((AddressDetails)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElements", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElements {
        
        private List<AddressDetailsPostalServiceElementsAddressIdentifier> addressIdentifierField;
        
        private AddressDetailsPostalServiceElementsEndorsementLineCode endorsementLineCodeField;
        
        private AddressDetailsPostalServiceElementsKeyLineCode keyLineCodeField;
        
        private AddressDetailsPostalServiceElementsBarcode barcodeField;
        
        private AddressDetailsPostalServiceElementsSortingCode sortingCodeField;
        
        private AddressDetailsPostalServiceElementsAddressLatitude addressLatitudeField;
        
        private AddressDetailsPostalServiceElementsAddressLatitudeDirection addressLatitudeDirectionField;
        
        private AddressDetailsPostalServiceElementsAddressLongitude addressLongitudeField;
        
        private AddressDetailsPostalServiceElementsAddressLongitudeDirection addressLongitudeDirectionField;
        
        private List<AddressDetailsPostalServiceElementsSupplementaryPostalServiceData> supplementaryPostalServiceDataField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElements class constructor
        /// </summary>
        public AddressDetailsPostalServiceElements() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.supplementaryPostalServiceDataField = new List<AddressDetailsPostalServiceElementsSupplementaryPostalServiceData>();
            this.addressLongitudeDirectionField = new AddressDetailsPostalServiceElementsAddressLongitudeDirection();
            this.addressLongitudeField = new AddressDetailsPostalServiceElementsAddressLongitude();
            this.addressLatitudeDirectionField = new AddressDetailsPostalServiceElementsAddressLatitudeDirection();
            this.addressLatitudeField = new AddressDetailsPostalServiceElementsAddressLatitude();
            this.sortingCodeField = new AddressDetailsPostalServiceElementsSortingCode();
            this.barcodeField = new AddressDetailsPostalServiceElementsBarcode();
            this.keyLineCodeField = new AddressDetailsPostalServiceElementsKeyLineCode();
            this.endorsementLineCodeField = new AddressDetailsPostalServiceElementsEndorsementLineCode();
            this.addressIdentifierField = new List<AddressDetailsPostalServiceElementsAddressIdentifier>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressIdentifier")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressDetailsPostalServiceElementsAddressIdentifier> AddressIdentifier {
            get {
                return this.addressIdentifierField;
            }
            set {
                this.addressIdentifierField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsEndorsementLineCode EndorsementLineCode {
            get {
                return this.endorsementLineCodeField;
            }
            set {
                this.endorsementLineCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsKeyLineCode KeyLineCode {
            get {
                return this.keyLineCodeField;
            }
            set {
                this.keyLineCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsBarcode Barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsSortingCode SortingCode {
            get {
                return this.sortingCodeField;
            }
            set {
                this.sortingCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsAddressLatitude AddressLatitude {
            get {
                return this.addressLatitudeField;
            }
            set {
                this.addressLatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsAddressLatitudeDirection AddressLatitudeDirection {
            get {
                return this.addressLatitudeDirectionField;
            }
            set {
                this.addressLatitudeDirectionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsAddressLongitude AddressLongitude {
            get {
                return this.addressLongitudeField;
            }
            set {
                this.addressLongitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AddressDetailsPostalServiceElementsAddressLongitudeDirection AddressLongitudeDirection {
            get {
                return this.addressLongitudeDirectionField;
            }
            set {
                this.addressLongitudeDirectionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SupplementaryPostalServiceData")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressDetailsPostalServiceElementsSupplementaryPostalServiceData> SupplementaryPostalServiceData {
            get {
                return this.supplementaryPostalServiceDataField;
            }
            set {
                this.supplementaryPostalServiceDataField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElements));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElements object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElements object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElements obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElements);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElements obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElements Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElements obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElements);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElements obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElements LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElements object
        /// </summary>
        public virtual AddressDetailsPostalServiceElements Clone() {
            return ((AddressDetailsPostalServiceElements)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsAddressIdentifier", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsAddressIdentifier {
        
        private string identifierTypeField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsAddressIdentifier class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsAddressIdentifier() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdentifierType {
            get {
                return this.identifierTypeField;
            }
            set {
                this.identifierTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsAddressIdentifier));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressIdentifier object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsAddressIdentifier object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressIdentifier obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressIdentifier);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressIdentifier obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressIdentifier Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsAddressIdentifier)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressIdentifier object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsAddressIdentifier object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressIdentifier obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressIdentifier);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressIdentifier obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressIdentifier LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsAddressIdentifier object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsAddressIdentifier Clone() {
            return ((AddressDetailsPostalServiceElementsAddressIdentifier)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsEndorsementLineCode", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsEndorsementLineCode {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsEndorsementLineCode class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsEndorsementLineCode() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsEndorsementLineCode));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsEndorsementLineCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsEndorsementLineCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsEndorsementLineCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsEndorsementLineCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsEndorsementLineCode);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsEndorsementLineCode obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsEndorsementLineCode Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsEndorsementLineCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsEndorsementLineCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsEndorsementLineCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsEndorsementLineCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsEndorsementLineCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsEndorsementLineCode);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsEndorsementLineCode obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsEndorsementLineCode LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsEndorsementLineCode object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsEndorsementLineCode Clone() {
            return ((AddressDetailsPostalServiceElementsEndorsementLineCode)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsKeyLineCode", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsKeyLineCode {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsKeyLineCode class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsKeyLineCode() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsKeyLineCode));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsKeyLineCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsKeyLineCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsKeyLineCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsKeyLineCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsKeyLineCode);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsKeyLineCode obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsKeyLineCode Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsKeyLineCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsKeyLineCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsKeyLineCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsKeyLineCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsKeyLineCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsKeyLineCode);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsKeyLineCode obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsKeyLineCode LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsKeyLineCode object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsKeyLineCode Clone() {
            return ((AddressDetailsPostalServiceElementsKeyLineCode)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsBarcode", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsBarcode {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsBarcode class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsBarcode() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsBarcode));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsBarcode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsBarcode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsBarcode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsBarcode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsBarcode);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsBarcode obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsBarcode Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsBarcode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsBarcode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsBarcode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsBarcode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsBarcode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsBarcode);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsBarcode obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsBarcode LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsBarcode object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsBarcode Clone() {
            return ((AddressDetailsPostalServiceElementsBarcode)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsSortingCode", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsSortingCode {
        
        private string typeField;
        
        private string codeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsSortingCode));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsSortingCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsSortingCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsSortingCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsSortingCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsSortingCode);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsSortingCode obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsSortingCode Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsSortingCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsSortingCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsSortingCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsSortingCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsSortingCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsSortingCode);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsSortingCode obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsSortingCode LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsSortingCode object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsSortingCode Clone() {
            return ((AddressDetailsPostalServiceElementsSortingCode)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsAddressLatitude", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsAddressLatitude {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsAddressLatitude class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsAddressLatitude() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsAddressLatitude));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLatitude object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsAddressLatitude object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLatitude object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLatitude obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLatitude);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLatitude obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLatitude Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsAddressLatitude)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLatitude object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsAddressLatitude object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLatitude object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLatitude obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLatitude);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLatitude obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLatitude LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsAddressLatitude object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsAddressLatitude Clone() {
            return ((AddressDetailsPostalServiceElementsAddressLatitude)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsAddressLatitudeDirection", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsAddressLatitudeDirection {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsAddressLatitudeDirection class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsAddressLatitudeDirection() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsAddressLatitudeDirection));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLatitudeDirection object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsAddressLatitudeDirection object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLatitudeDirection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLatitudeDirection obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLatitudeDirection);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLatitudeDirection obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLatitudeDirection Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsAddressLatitudeDirection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLatitudeDirection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsAddressLatitudeDirection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLatitudeDirection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLatitudeDirection obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLatitudeDirection);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLatitudeDirection obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLatitudeDirection LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsAddressLatitudeDirection object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsAddressLatitudeDirection Clone() {
            return ((AddressDetailsPostalServiceElementsAddressLatitudeDirection)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsAddressLongitude", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsAddressLongitude {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsAddressLongitude class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsAddressLongitude() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsAddressLongitude));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLongitude object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsAddressLongitude object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLongitude object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLongitude obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLongitude);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLongitude obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLongitude Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsAddressLongitude)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLongitude object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsAddressLongitude object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLongitude object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLongitude obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLongitude);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLongitude obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLongitude LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsAddressLongitude object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsAddressLongitude Clone() {
            return ((AddressDetailsPostalServiceElementsAddressLongitude)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsAddressLongitudeDirection", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsAddressLongitudeDirection {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsAddressLongitudeDirection class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsAddressLongitudeDirection() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsAddressLongitudeDirection));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLongitudeDirection object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsAddressLongitudeDirection object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLongitudeDirection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLongitudeDirection obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLongitudeDirection);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsAddressLongitudeDirection obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLongitudeDirection Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsAddressLongitudeDirection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsAddressLongitudeDirection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsAddressLongitudeDirection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsAddressLongitudeDirection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLongitudeDirection obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsAddressLongitudeDirection);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsAddressLongitudeDirection obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsAddressLongitudeDirection LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsAddressLongitudeDirection object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsAddressLongitudeDirection Clone() {
            return ((AddressDetailsPostalServiceElementsAddressLongitudeDirection)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsPostalServiceElementsSupplementaryPostalServiceData", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsPostalServiceElementsSupplementaryPostalServiceData {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsPostalServiceElementsSupplementaryPostalServiceData class constructor
        /// </summary>
        public AddressDetailsPostalServiceElementsSupplementaryPostalServiceData() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsPostalServiceElementsSupplementaryPostalServiceData));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsSupplementaryPostalServiceData obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsSupplementaryPostalServiceData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsPostalServiceElementsSupplementaryPostalServiceData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsSupplementaryPostalServiceData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsPostalServiceElementsSupplementaryPostalServiceData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsSupplementaryPostalServiceData obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsPostalServiceElementsSupplementaryPostalServiceData);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsPostalServiceElementsSupplementaryPostalServiceData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsPostalServiceElementsSupplementaryPostalServiceData LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsPostalServiceElementsSupplementaryPostalServiceData object
        /// </summary>
        public virtual AddressDetailsPostalServiceElementsSupplementaryPostalServiceData Clone() {
            return ((AddressDetailsPostalServiceElementsSupplementaryPostalServiceData)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsAddress", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsAddress {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsAddress class constructor
        /// </summary>
        public AddressDetailsAddress() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsAddress));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsAddress object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsAddress object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsAddress);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsAddress obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsAddress Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsAddress)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsAddress object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsAddress object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsAddress);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsAddress obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsAddress LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsAddress object
        /// </summary>
        public virtual AddressDetailsAddress Clone() {
            return ((AddressDetailsAddress)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressLinesType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressLinesType {
        
        private List<AddressLine> addressLineField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressLinesType class constructor
        /// </summary>
        public AddressLinesType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressLinesType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressLinesType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressLinesType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressLinesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressLinesType obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressLinesType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressLinesType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressLinesType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressLinesType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressLinesType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressLinesType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressLinesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressLinesType obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressLinesType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressLinesType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressLinesType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressLinesType object
        /// </summary>
        public virtual AddressLinesType Clone() {
            return ((AddressLinesType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressLine", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressLine {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressLine class constructor
        /// </summary>
        public AddressLine() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressLine));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressLine object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressLine object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressLine obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressLine);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressLine obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressLine Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressLine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressLine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressLine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressLine obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressLine);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressLine obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressLine LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressLine object
        /// </summary>
        public virtual AddressLine Clone() {
            return ((AddressLine)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministrativeArea", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AdministrativeArea {
        
        private List<AddressLine> addressLineField;
        
        private List<AdministrativeAreaAdministrativeAreaName> administrativeAreaNameField;
        
        private AdministrativeAreaSubAdministrativeArea subAdministrativeAreaField;
        
        private object itemField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string usageTypeField;
        
        private string indicatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AdministrativeArea class constructor
        /// </summary>
        public AdministrativeArea() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.subAdministrativeAreaField = new AdministrativeAreaSubAdministrativeArea();
            this.administrativeAreaNameField = new List<AdministrativeAreaAdministrativeAreaName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AdministrativeAreaName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AdministrativeAreaAdministrativeAreaName> AdministrativeAreaName {
            get {
                return this.administrativeAreaNameField;
            }
            set {
                this.administrativeAreaNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministrativeAreaSubAdministrativeArea SubAdministrativeArea {
            get {
                return this.subAdministrativeAreaField;
            }
            set {
                this.subAdministrativeAreaField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Locality", typeof(Locality))]
        [System.Xml.Serialization.XmlElementAttribute("PostOffice", typeof(PostOffice))]
        [System.Xml.Serialization.XmlElementAttribute("PostalCode", typeof(PostalCode))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsageType {
            get {
                return this.usageTypeField;
            }
            set {
                this.usageTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AdministrativeArea));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AdministrativeArea object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AdministrativeArea object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AdministrativeArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AdministrativeArea obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeArea);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AdministrativeArea obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AdministrativeArea Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AdministrativeArea)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AdministrativeArea object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AdministrativeArea object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AdministrativeArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AdministrativeArea obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeArea);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AdministrativeArea obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AdministrativeArea LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AdministrativeArea object
        /// </summary>
        public virtual AdministrativeArea Clone() {
            return ((AdministrativeArea)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministrativeAreaAdministrativeAreaName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AdministrativeAreaAdministrativeAreaName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AdministrativeAreaAdministrativeAreaName class constructor
        /// </summary>
        public AdministrativeAreaAdministrativeAreaName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AdministrativeAreaAdministrativeAreaName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AdministrativeAreaAdministrativeAreaName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AdministrativeAreaAdministrativeAreaName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AdministrativeAreaAdministrativeAreaName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AdministrativeAreaAdministrativeAreaName obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeAreaAdministrativeAreaName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AdministrativeAreaAdministrativeAreaName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AdministrativeAreaAdministrativeAreaName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AdministrativeAreaAdministrativeAreaName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AdministrativeAreaAdministrativeAreaName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AdministrativeAreaAdministrativeAreaName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AdministrativeAreaAdministrativeAreaName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AdministrativeAreaAdministrativeAreaName obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeAreaAdministrativeAreaName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AdministrativeAreaAdministrativeAreaName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AdministrativeAreaAdministrativeAreaName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AdministrativeAreaAdministrativeAreaName object
        /// </summary>
        public virtual AdministrativeAreaAdministrativeAreaName Clone() {
            return ((AdministrativeAreaAdministrativeAreaName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministrativeAreaSubAdministrativeArea", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AdministrativeAreaSubAdministrativeArea {
        
        private List<AddressLine> addressLineField;
        
        private List<AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName> subAdministrativeAreaNameField;
        
        private object itemField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string usageTypeField;
        
        private string indicatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AdministrativeAreaSubAdministrativeArea class constructor
        /// </summary>
        public AdministrativeAreaSubAdministrativeArea() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.subAdministrativeAreaNameField = new List<AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SubAdministrativeAreaName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName> SubAdministrativeAreaName {
            get {
                return this.subAdministrativeAreaNameField;
            }
            set {
                this.subAdministrativeAreaNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Locality", typeof(Locality))]
        [System.Xml.Serialization.XmlElementAttribute("PostOffice", typeof(PostOffice))]
        [System.Xml.Serialization.XmlElementAttribute("PostalCode", typeof(PostalCode))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsageType {
            get {
                return this.usageTypeField;
            }
            set {
                this.usageTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AdministrativeAreaSubAdministrativeArea));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AdministrativeAreaSubAdministrativeArea object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AdministrativeAreaSubAdministrativeArea object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AdministrativeAreaSubAdministrativeArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AdministrativeAreaSubAdministrativeArea obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeAreaSubAdministrativeArea);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AdministrativeAreaSubAdministrativeArea obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AdministrativeAreaSubAdministrativeArea Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AdministrativeAreaSubAdministrativeArea)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AdministrativeAreaSubAdministrativeArea object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AdministrativeAreaSubAdministrativeArea object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AdministrativeAreaSubAdministrativeArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AdministrativeAreaSubAdministrativeArea obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeAreaSubAdministrativeArea);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AdministrativeAreaSubAdministrativeArea obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AdministrativeAreaSubAdministrativeArea LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AdministrativeAreaSubAdministrativeArea object
        /// </summary>
        public virtual AdministrativeAreaSubAdministrativeArea Clone() {
            return ((AdministrativeAreaSubAdministrativeArea)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName class constructor
        /// </summary>
        public AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName obj, out System.Exception exception) {
            exception = null;
            obj = default(AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName object
        /// </summary>
        public virtual AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName Clone() {
            return ((AdministrativeAreaSubAdministrativeAreaSubAdministrativeAreaName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Locality", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class Locality {
        
        private List<AddressLine> addressLineField;
        
        private List<LocalityLocalityName> localityNameField;
        
        private object itemField;
        
        private Thoroughfare thoroughfareField;
        
        private Premise premiseField;
        
        private DependentLocalityType dependentLocalityField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string usageTypeField;
        
        private string indicatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Locality class constructor
        /// </summary>
        public Locality() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.dependentLocalityField = new DependentLocalityType();
            this.premiseField = new Premise();
            this.thoroughfareField = new Thoroughfare();
            this.localityNameField = new List<LocalityLocalityName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LocalityName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<LocalityLocalityName> LocalityName {
            get {
                return this.localityNameField;
            }
            set {
                this.localityNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LargeMailUser", typeof(LargeMailUserType))]
        [System.Xml.Serialization.XmlElementAttribute("PostBox", typeof(PostBox))]
        [System.Xml.Serialization.XmlElementAttribute("PostOffice", typeof(PostOffice))]
        [System.Xml.Serialization.XmlElementAttribute("PostalRoute", typeof(PostalRouteType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Thoroughfare Thoroughfare {
            get {
                return this.thoroughfareField;
            }
            set {
                this.thoroughfareField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Premise Premise {
            get {
                return this.premiseField;
            }
            set {
                this.premiseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DependentLocalityType DependentLocality {
            get {
                return this.dependentLocalityField;
            }
            set {
                this.dependentLocalityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsageType {
            get {
                return this.usageTypeField;
            }
            set {
                this.usageTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Locality));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Locality object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Locality object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Locality object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Locality obj, out System.Exception exception) {
            exception = null;
            obj = default(Locality);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Locality obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Locality Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Locality)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Locality object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Locality object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Locality object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Locality obj, out System.Exception exception) {
            exception = null;
            obj = default(Locality);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Locality obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Locality LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Locality object
        /// </summary>
        public virtual Locality Clone() {
            return ((Locality)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalityLocalityName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LocalityLocalityName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// LocalityLocalityName class constructor
        /// </summary>
        public LocalityLocalityName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LocalityLocalityName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LocalityLocalityName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LocalityLocalityName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LocalityLocalityName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LocalityLocalityName obj, out System.Exception exception) {
            exception = null;
            obj = default(LocalityLocalityName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LocalityLocalityName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LocalityLocalityName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LocalityLocalityName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LocalityLocalityName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LocalityLocalityName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LocalityLocalityName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LocalityLocalityName obj, out System.Exception exception) {
            exception = null;
            obj = default(LocalityLocalityName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LocalityLocalityName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LocalityLocalityName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LocalityLocalityName object
        /// </summary>
        public virtual LocalityLocalityName Clone() {
            return ((LocalityLocalityName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LargeMailUserType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LargeMailUserType {
        
        private List<AddressLine> addressLineField;
        
        private List<LargeMailUserTypeLargeMailUserName> largeMailUserNameField;
        
        private LargeMailUserTypeLargeMailUserIdentifier largeMailUserIdentifierField;
        
        private List<BuildingNameType> buildingNameField;
        
        private Department departmentField;
        
        private PostBox postBoxField;
        
        private Thoroughfare thoroughfareField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// LargeMailUserType class constructor
        /// </summary>
        public LargeMailUserType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.thoroughfareField = new Thoroughfare();
            this.postBoxField = new PostBox();
            this.departmentField = new Department();
            this.buildingNameField = new List<BuildingNameType>();
            this.largeMailUserIdentifierField = new LargeMailUserTypeLargeMailUserIdentifier();
            this.largeMailUserNameField = new List<LargeMailUserTypeLargeMailUserName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LargeMailUserName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<LargeMailUserTypeLargeMailUserName> LargeMailUserName {
            get {
                return this.largeMailUserNameField;
            }
            set {
                this.largeMailUserNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LargeMailUserTypeLargeMailUserIdentifier LargeMailUserIdentifier {
            get {
                return this.largeMailUserIdentifierField;
            }
            set {
                this.largeMailUserIdentifierField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BuildingName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<BuildingNameType> BuildingName {
            get {
                return this.buildingNameField;
            }
            set {
                this.buildingNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Department Department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBox PostBox {
            get {
                return this.postBoxField;
            }
            set {
                this.postBoxField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Thoroughfare Thoroughfare {
            get {
                return this.thoroughfareField;
            }
            set {
                this.thoroughfareField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LargeMailUserType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LargeMailUserType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LargeMailUserType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LargeMailUserType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LargeMailUserType obj, out System.Exception exception) {
            exception = null;
            obj = default(LargeMailUserType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LargeMailUserType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LargeMailUserType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LargeMailUserType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LargeMailUserType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LargeMailUserType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LargeMailUserType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LargeMailUserType obj, out System.Exception exception) {
            exception = null;
            obj = default(LargeMailUserType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LargeMailUserType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LargeMailUserType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LargeMailUserType object
        /// </summary>
        public virtual LargeMailUserType Clone() {
            return ((LargeMailUserType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LargeMailUserTypeLargeMailUserName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LargeMailUserTypeLargeMailUserName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// LargeMailUserTypeLargeMailUserName class constructor
        /// </summary>
        public LargeMailUserTypeLargeMailUserName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LargeMailUserTypeLargeMailUserName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LargeMailUserTypeLargeMailUserName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LargeMailUserTypeLargeMailUserName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LargeMailUserTypeLargeMailUserName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LargeMailUserTypeLargeMailUserName obj, out System.Exception exception) {
            exception = null;
            obj = default(LargeMailUserTypeLargeMailUserName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LargeMailUserTypeLargeMailUserName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LargeMailUserTypeLargeMailUserName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LargeMailUserTypeLargeMailUserName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LargeMailUserTypeLargeMailUserName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LargeMailUserTypeLargeMailUserName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LargeMailUserTypeLargeMailUserName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LargeMailUserTypeLargeMailUserName obj, out System.Exception exception) {
            exception = null;
            obj = default(LargeMailUserTypeLargeMailUserName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LargeMailUserTypeLargeMailUserName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LargeMailUserTypeLargeMailUserName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LargeMailUserTypeLargeMailUserName object
        /// </summary>
        public virtual LargeMailUserTypeLargeMailUserName Clone() {
            return ((LargeMailUserTypeLargeMailUserName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LargeMailUserTypeLargeMailUserIdentifier", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class LargeMailUserTypeLargeMailUserIdentifier {
        
        private string typeField;
        
        private string indicatorField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// LargeMailUserTypeLargeMailUserIdentifier class constructor
        /// </summary>
        public LargeMailUserTypeLargeMailUserIdentifier() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LargeMailUserTypeLargeMailUserIdentifier));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LargeMailUserTypeLargeMailUserIdentifier object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LargeMailUserTypeLargeMailUserIdentifier object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LargeMailUserTypeLargeMailUserIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LargeMailUserTypeLargeMailUserIdentifier obj, out System.Exception exception) {
            exception = null;
            obj = default(LargeMailUserTypeLargeMailUserIdentifier);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LargeMailUserTypeLargeMailUserIdentifier obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LargeMailUserTypeLargeMailUserIdentifier Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LargeMailUserTypeLargeMailUserIdentifier)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LargeMailUserTypeLargeMailUserIdentifier object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LargeMailUserTypeLargeMailUserIdentifier object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LargeMailUserTypeLargeMailUserIdentifier object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out LargeMailUserTypeLargeMailUserIdentifier obj, out System.Exception exception) {
            exception = null;
            obj = default(LargeMailUserTypeLargeMailUserIdentifier);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LargeMailUserTypeLargeMailUserIdentifier obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LargeMailUserTypeLargeMailUserIdentifier LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this LargeMailUserTypeLargeMailUserIdentifier object
        /// </summary>
        public virtual LargeMailUserTypeLargeMailUserIdentifier Clone() {
            return ((LargeMailUserTypeLargeMailUserIdentifier)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BuildingNameType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class BuildingNameType {
        
        private string typeField;
        
        private bool typeOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public BuildingNameTypeTypeOccurrence TypeOccurrence {get; set;}

        
        /// <summary>
        /// BuildingNameType class constructor
        /// </summary>
        public BuildingNameType() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeOccurrenceSpecified {
            get {
                return this.typeOccurrenceFieldSpecified;
            }
            set {
                this.typeOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BuildingNameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BuildingNameType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BuildingNameType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BuildingNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BuildingNameType obj, out System.Exception exception) {
            exception = null;
            obj = default(BuildingNameType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BuildingNameType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BuildingNameType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BuildingNameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BuildingNameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BuildingNameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BuildingNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out BuildingNameType obj, out System.Exception exception) {
            exception = null;
            obj = default(BuildingNameType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BuildingNameType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BuildingNameType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this BuildingNameType object
        /// </summary>
        public virtual BuildingNameType Clone() {
            return ((BuildingNameType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum BuildingNameTypeTypeOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Department", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class Department {
        
        private List<AddressLine> addressLineField;
        
        private List<DepartmentDepartmentName> departmentNameField;
        
        private MailStopType mailStopField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Department class constructor
        /// </summary>
        public Department() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.mailStopField = new MailStopType();
            this.departmentNameField = new List<DepartmentDepartmentName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DepartmentName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<DepartmentDepartmentName> DepartmentName {
            get {
                return this.departmentNameField;
            }
            set {
                this.departmentNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MailStopType MailStop {
            get {
                return this.mailStopField;
            }
            set {
                this.mailStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Department));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Department object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Department object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Department object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Department obj, out System.Exception exception) {
            exception = null;
            obj = default(Department);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Department obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Department Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Department)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Department object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Department object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Department object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Department obj, out System.Exception exception) {
            exception = null;
            obj = default(Department);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Department obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Department LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Department object
        /// </summary>
        public virtual Department Clone() {
            return ((Department)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartmentDepartmentName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DepartmentDepartmentName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DepartmentDepartmentName class constructor
        /// </summary>
        public DepartmentDepartmentName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DepartmentDepartmentName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DepartmentDepartmentName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DepartmentDepartmentName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DepartmentDepartmentName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DepartmentDepartmentName obj, out System.Exception exception) {
            exception = null;
            obj = default(DepartmentDepartmentName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DepartmentDepartmentName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DepartmentDepartmentName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DepartmentDepartmentName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DepartmentDepartmentName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DepartmentDepartmentName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DepartmentDepartmentName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DepartmentDepartmentName obj, out System.Exception exception) {
            exception = null;
            obj = default(DepartmentDepartmentName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DepartmentDepartmentName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DepartmentDepartmentName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DepartmentDepartmentName object
        /// </summary>
        public virtual DepartmentDepartmentName Clone() {
            return ((DepartmentDepartmentName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailStopType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class MailStopType {
        
        private List<AddressLine> addressLineField;
        
        private MailStopTypeMailStopName mailStopNameField;
        
        private MailStopTypeMailStopNumber mailStopNumberField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// MailStopType class constructor
        /// </summary>
        public MailStopType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.mailStopNumberField = new MailStopTypeMailStopNumber();
            this.mailStopNameField = new MailStopTypeMailStopName();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MailStopTypeMailStopName MailStopName {
            get {
                return this.mailStopNameField;
            }
            set {
                this.mailStopNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MailStopTypeMailStopNumber MailStopNumber {
            get {
                return this.mailStopNumberField;
            }
            set {
                this.mailStopNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MailStopType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MailStopType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MailStopType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MailStopType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MailStopType obj, out System.Exception exception) {
            exception = null;
            obj = default(MailStopType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MailStopType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MailStopType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MailStopType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MailStopType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MailStopType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MailStopType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MailStopType obj, out System.Exception exception) {
            exception = null;
            obj = default(MailStopType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MailStopType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MailStopType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MailStopType object
        /// </summary>
        public virtual MailStopType Clone() {
            return ((MailStopType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailStopTypeMailStopName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class MailStopTypeMailStopName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// MailStopTypeMailStopName class constructor
        /// </summary>
        public MailStopTypeMailStopName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MailStopTypeMailStopName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MailStopTypeMailStopName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MailStopTypeMailStopName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MailStopTypeMailStopName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MailStopTypeMailStopName obj, out System.Exception exception) {
            exception = null;
            obj = default(MailStopTypeMailStopName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MailStopTypeMailStopName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MailStopTypeMailStopName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MailStopTypeMailStopName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MailStopTypeMailStopName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MailStopTypeMailStopName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MailStopTypeMailStopName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MailStopTypeMailStopName obj, out System.Exception exception) {
            exception = null;
            obj = default(MailStopTypeMailStopName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MailStopTypeMailStopName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MailStopTypeMailStopName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MailStopTypeMailStopName object
        /// </summary>
        public virtual MailStopTypeMailStopName Clone() {
            return ((MailStopTypeMailStopName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MailStopTypeMailStopNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class MailStopTypeMailStopNumber {
        
        private string nameNumberSeparatorField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// MailStopTypeMailStopNumber class constructor
        /// </summary>
        public MailStopTypeMailStopNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameNumberSeparator {
            get {
                return this.nameNumberSeparatorField;
            }
            set {
                this.nameNumberSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MailStopTypeMailStopNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MailStopTypeMailStopNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MailStopTypeMailStopNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MailStopTypeMailStopNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MailStopTypeMailStopNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(MailStopTypeMailStopNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MailStopTypeMailStopNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MailStopTypeMailStopNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MailStopTypeMailStopNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MailStopTypeMailStopNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MailStopTypeMailStopNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MailStopTypeMailStopNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MailStopTypeMailStopNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(MailStopTypeMailStopNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MailStopTypeMailStopNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MailStopTypeMailStopNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MailStopTypeMailStopNumber object
        /// </summary>
        public virtual MailStopTypeMailStopNumber Clone() {
            return ((MailStopTypeMailStopNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalCode", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalCode {
        
        private List<AddressLine> addressLineField;
        
        private List<PostalCodePostalCodeNumber> postalCodeNumberField;
        
        private List<PostalCodePostalCodeNumberExtension> postalCodeNumberExtensionField;
        
        private PostalCodePostTown postTownField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalCode class constructor
        /// </summary>
        public PostalCode() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postTownField = new PostalCodePostTown();
            this.postalCodeNumberExtensionField = new List<PostalCodePostalCodeNumberExtension>();
            this.postalCodeNumberField = new List<PostalCodePostalCodeNumber>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalCodeNumber")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PostalCodePostalCodeNumber> PostalCodeNumber {
            get {
                return this.postalCodeNumberField;
            }
            set {
                this.postalCodeNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalCodeNumberExtension")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PostalCodePostalCodeNumberExtension> PostalCodeNumberExtension {
            get {
                return this.postalCodeNumberExtensionField;
            }
            set {
                this.postalCodeNumberExtensionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCodePostTown PostTown {
            get {
                return this.postTownField;
            }
            set {
                this.postTownField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalCode));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalCode obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCode);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalCode obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalCode Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalCode obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCode);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalCode obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalCode LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalCode object
        /// </summary>
        public virtual PostalCode Clone() {
            return ((PostalCode)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalCodePostalCodeNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalCodePostalCodeNumber {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalCodePostalCodeNumber class constructor
        /// </summary>
        public PostalCodePostalCodeNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalCodePostalCodeNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalCodePostalCodeNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalCodePostalCodeNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalCodePostalCodeNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalCodePostalCodeNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostalCodeNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalCodePostalCodeNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalCodePostalCodeNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalCodePostalCodeNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalCodePostalCodeNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalCodePostalCodeNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalCodePostalCodeNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalCodePostalCodeNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostalCodeNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalCodePostalCodeNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalCodePostalCodeNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalCodePostalCodeNumber object
        /// </summary>
        public virtual PostalCodePostalCodeNumber Clone() {
            return ((PostalCodePostalCodeNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalCodePostalCodeNumberExtension", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalCodePostalCodeNumberExtension {
        
        private string typeField;
        
        private string numberExtensionSeparatorField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalCodePostalCodeNumberExtension class constructor
        /// </summary>
        public PostalCodePostalCodeNumberExtension() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberExtensionSeparator {
            get {
                return this.numberExtensionSeparatorField;
            }
            set {
                this.numberExtensionSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalCodePostalCodeNumberExtension));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalCodePostalCodeNumberExtension object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalCodePostalCodeNumberExtension object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalCodePostalCodeNumberExtension object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalCodePostalCodeNumberExtension obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostalCodeNumberExtension);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalCodePostalCodeNumberExtension obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalCodePostalCodeNumberExtension Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalCodePostalCodeNumberExtension)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalCodePostalCodeNumberExtension object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalCodePostalCodeNumberExtension object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalCodePostalCodeNumberExtension object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalCodePostalCodeNumberExtension obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostalCodeNumberExtension);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalCodePostalCodeNumberExtension obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalCodePostalCodeNumberExtension LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalCodePostalCodeNumberExtension object
        /// </summary>
        public virtual PostalCodePostalCodeNumberExtension Clone() {
            return ((PostalCodePostalCodeNumberExtension)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalCodePostTown", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalCodePostTown {
        
        private List<AddressLine> addressLineField;
        
        private List<PostalCodePostTownPostTownName> postTownNameField;
        
        private PostalCodePostTownPostTownSuffix postTownSuffixField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalCodePostTown class constructor
        /// </summary>
        public PostalCodePostTown() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.postTownSuffixField = new PostalCodePostTownPostTownSuffix();
            this.postTownNameField = new List<PostalCodePostTownPostTownName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PostTownName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PostalCodePostTownPostTownName> PostTownName {
            get {
                return this.postTownNameField;
            }
            set {
                this.postTownNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCodePostTownPostTownSuffix PostTownSuffix {
            get {
                return this.postTownSuffixField;
            }
            set {
                this.postTownSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalCodePostTown));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalCodePostTown object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalCodePostTown object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalCodePostTown object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalCodePostTown obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostTown);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalCodePostTown obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalCodePostTown Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalCodePostTown)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalCodePostTown object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalCodePostTown object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalCodePostTown object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalCodePostTown obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostTown);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalCodePostTown obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalCodePostTown LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalCodePostTown object
        /// </summary>
        public virtual PostalCodePostTown Clone() {
            return ((PostalCodePostTown)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalCodePostTownPostTownName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalCodePostTownPostTownName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalCodePostTownPostTownName class constructor
        /// </summary>
        public PostalCodePostTownPostTownName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalCodePostTownPostTownName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalCodePostTownPostTownName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalCodePostTownPostTownName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalCodePostTownPostTownName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalCodePostTownPostTownName obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostTownPostTownName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalCodePostTownPostTownName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalCodePostTownPostTownName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalCodePostTownPostTownName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalCodePostTownPostTownName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalCodePostTownPostTownName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalCodePostTownPostTownName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalCodePostTownPostTownName obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostTownPostTownName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalCodePostTownPostTownName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalCodePostTownPostTownName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalCodePostTownPostTownName object
        /// </summary>
        public virtual PostalCodePostTownPostTownName Clone() {
            return ((PostalCodePostTownPostTownName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalCodePostTownPostTownSuffix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalCodePostTownPostTownSuffix {
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalCodePostTownPostTownSuffix class constructor
        /// </summary>
        public PostalCodePostTownPostTownSuffix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalCodePostTownPostTownSuffix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalCodePostTownPostTownSuffix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalCodePostTownPostTownSuffix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalCodePostTownPostTownSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalCodePostTownPostTownSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostTownPostTownSuffix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalCodePostTownPostTownSuffix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalCodePostTownPostTownSuffix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalCodePostTownPostTownSuffix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalCodePostTownPostTownSuffix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalCodePostTownPostTownSuffix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalCodePostTownPostTownSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalCodePostTownPostTownSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalCodePostTownPostTownSuffix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalCodePostTownPostTownSuffix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalCodePostTownPostTownSuffix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalCodePostTownPostTownSuffix object
        /// </summary>
        public virtual PostalCodePostTownPostTownSuffix Clone() {
            return ((PostalCodePostTownPostTownSuffix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostBox", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostBox {
        
        private List<AddressLine> addressLineField;
        
        private PostBoxPostBoxNumber postBoxNumberField;
        
        private PostBoxPostBoxNumberPrefix postBoxNumberPrefixField;
        
        private PostBoxPostBoxNumberSuffix postBoxNumberSuffixField;
        
        private PostBoxPostBoxNumberExtension postBoxNumberExtensionField;
        
        private FirmType firmField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string indicatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostBox class constructor
        /// </summary>
        public PostBox() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.firmField = new FirmType();
            this.postBoxNumberExtensionField = new PostBoxPostBoxNumberExtension();
            this.postBoxNumberSuffixField = new PostBoxPostBoxNumberSuffix();
            this.postBoxNumberPrefixField = new PostBoxPostBoxNumberPrefix();
            this.postBoxNumberField = new PostBoxPostBoxNumber();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBoxPostBoxNumber PostBoxNumber {
            get {
                return this.postBoxNumberField;
            }
            set {
                this.postBoxNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBoxPostBoxNumberPrefix PostBoxNumberPrefix {
            get {
                return this.postBoxNumberPrefixField;
            }
            set {
                this.postBoxNumberPrefixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBoxPostBoxNumberSuffix PostBoxNumberSuffix {
            get {
                return this.postBoxNumberSuffixField;
            }
            set {
                this.postBoxNumberSuffixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBoxPostBoxNumberExtension PostBoxNumberExtension {
            get {
                return this.postBoxNumberExtensionField;
            }
            set {
                this.postBoxNumberExtensionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FirmType Firm {
            get {
                return this.firmField;
            }
            set {
                this.firmField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostBox));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostBox object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostBox object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostBox object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostBox obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBox);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostBox obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostBox Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostBox)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostBox object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostBox object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostBox object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostBox obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBox);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostBox obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostBox LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostBox object
        /// </summary>
        public virtual PostBox Clone() {
            return ((PostBox)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostBoxPostBoxNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostBoxPostBoxNumber {
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostBoxPostBoxNumber class constructor
        /// </summary>
        public PostBoxPostBoxNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostBoxPostBoxNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostBoxPostBoxNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostBoxPostBoxNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostBoxPostBoxNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostBoxPostBoxNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostBoxPostBoxNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostBoxPostBoxNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostBoxPostBoxNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostBoxPostBoxNumber object
        /// </summary>
        public virtual PostBoxPostBoxNumber Clone() {
            return ((PostBoxPostBoxNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostBoxPostBoxNumberPrefix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostBoxPostBoxNumberPrefix {
        
        private string numberPrefixSeparatorField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostBoxPostBoxNumberPrefix class constructor
        /// </summary>
        public PostBoxPostBoxNumberPrefix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberPrefixSeparator {
            get {
                return this.numberPrefixSeparatorField;
            }
            set {
                this.numberPrefixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostBoxPostBoxNumberPrefix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostBoxPostBoxNumberPrefix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostBoxPostBoxNumberPrefix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostBoxPostBoxNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumberPrefix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostBoxPostBoxNumberPrefix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumberPrefix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostBoxPostBoxNumberPrefix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostBoxPostBoxNumberPrefix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostBoxPostBoxNumberPrefix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumberPrefix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumberPrefix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumberPrefix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostBoxPostBoxNumberPrefix object
        /// </summary>
        public virtual PostBoxPostBoxNumberPrefix Clone() {
            return ((PostBoxPostBoxNumberPrefix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostBoxPostBoxNumberSuffix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostBoxPostBoxNumberSuffix {
        
        private string numberSuffixSeparatorField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostBoxPostBoxNumberSuffix class constructor
        /// </summary>
        public PostBoxPostBoxNumberSuffix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberSuffixSeparator {
            get {
                return this.numberSuffixSeparatorField;
            }
            set {
                this.numberSuffixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostBoxPostBoxNumberSuffix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostBoxPostBoxNumberSuffix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostBoxPostBoxNumberSuffix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostBoxPostBoxNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumberSuffix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostBoxPostBoxNumberSuffix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumberSuffix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostBoxPostBoxNumberSuffix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostBoxPostBoxNumberSuffix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostBoxPostBoxNumberSuffix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumberSuffix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumberSuffix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumberSuffix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostBoxPostBoxNumberSuffix object
        /// </summary>
        public virtual PostBoxPostBoxNumberSuffix Clone() {
            return ((PostBoxPostBoxNumberSuffix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostBoxPostBoxNumberExtension", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostBoxPostBoxNumberExtension {
        
        private string numberExtensionSeparatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostBoxPostBoxNumberExtension class constructor
        /// </summary>
        public PostBoxPostBoxNumberExtension() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberExtensionSeparator {
            get {
                return this.numberExtensionSeparatorField;
            }
            set {
                this.numberExtensionSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostBoxPostBoxNumberExtension));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostBoxPostBoxNumberExtension object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostBoxPostBoxNumberExtension object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumberExtension object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostBoxPostBoxNumberExtension obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumberExtension);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostBoxPostBoxNumberExtension obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumberExtension Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostBoxPostBoxNumberExtension)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostBoxPostBoxNumberExtension object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostBoxPostBoxNumberExtension object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostBoxPostBoxNumberExtension object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumberExtension obj, out System.Exception exception) {
            exception = null;
            obj = default(PostBoxPostBoxNumberExtension);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostBoxPostBoxNumberExtension obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostBoxPostBoxNumberExtension LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostBoxPostBoxNumberExtension object
        /// </summary>
        public virtual PostBoxPostBoxNumberExtension Clone() {
            return ((PostBoxPostBoxNumberExtension)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FirmType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class FirmType {
        
        private List<AddressLine> addressLineField;
        
        private List<FirmTypeFirmName> firmNameField;
        
        private List<Department> departmentField;
        
        private MailStopType mailStopField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// FirmType class constructor
        /// </summary>
        public FirmType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.mailStopField = new MailStopType();
            this.departmentField = new List<Department>();
            this.firmNameField = new List<FirmTypeFirmName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("FirmName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<FirmTypeFirmName> FirmName {
            get {
                return this.firmNameField;
            }
            set {
                this.firmNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Department")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<Department> Department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MailStopType MailStop {
            get {
                return this.mailStopField;
            }
            set {
                this.mailStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FirmType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FirmType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FirmType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FirmType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FirmType obj, out System.Exception exception) {
            exception = null;
            obj = default(FirmType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FirmType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FirmType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FirmType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FirmType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FirmType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FirmType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FirmType obj, out System.Exception exception) {
            exception = null;
            obj = default(FirmType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FirmType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FirmType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FirmType object
        /// </summary>
        public virtual FirmType Clone() {
            return ((FirmType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FirmTypeFirmName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class FirmTypeFirmName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// FirmTypeFirmName class constructor
        /// </summary>
        public FirmTypeFirmName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FirmTypeFirmName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FirmTypeFirmName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FirmTypeFirmName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FirmTypeFirmName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FirmTypeFirmName obj, out System.Exception exception) {
            exception = null;
            obj = default(FirmTypeFirmName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FirmTypeFirmName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FirmTypeFirmName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FirmTypeFirmName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FirmTypeFirmName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FirmTypeFirmName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FirmTypeFirmName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FirmTypeFirmName obj, out System.Exception exception) {
            exception = null;
            obj = default(FirmTypeFirmName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FirmTypeFirmName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FirmTypeFirmName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FirmTypeFirmName object
        /// </summary>
        public virtual FirmTypeFirmName Clone() {
            return ((FirmTypeFirmName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Thoroughfare", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class Thoroughfare {
        
        private List<AddressLine> addressLineField;
        
        private List<object> itemsField;
        
        private List<ThoroughfareNumberPrefix> thoroughfareNumberPrefixField;
        
        private List<ThoroughfareNumberSuffix> thoroughfareNumberSuffixField;
        
        private ThoroughfarePreDirectionType thoroughfarePreDirectionField;
        
        private ThoroughfareLeadingTypeType thoroughfareLeadingTypeField;
        
        private List<ThoroughfareNameType> thoroughfareNameField;
        
        private ThoroughfareTrailingTypeType thoroughfareTrailingTypeField;
        
        private ThoroughfarePostDirectionType thoroughfarePostDirectionField;
        
        private ThoroughfareDependentThoroughfare dependentThoroughfareField;
        
        private object itemField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private bool dependentThoroughfaresFieldSpecified;
        
        private string dependentThoroughfaresIndicatorField;
        
        private string dependentThoroughfaresConnectorField;
        
        private string dependentThoroughfaresTypeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareDependentThoroughfares DependentThoroughfares {get; set;}

        
        /// <summary>
        /// Thoroughfare class constructor
        /// </summary>
        public Thoroughfare() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.dependentThoroughfareField = new ThoroughfareDependentThoroughfare();
            this.thoroughfarePostDirectionField = new ThoroughfarePostDirectionType();
            this.thoroughfareTrailingTypeField = new ThoroughfareTrailingTypeType();
            this.thoroughfareNameField = new List<ThoroughfareNameType>();
            this.thoroughfareLeadingTypeField = new ThoroughfareLeadingTypeType();
            this.thoroughfarePreDirectionField = new ThoroughfarePreDirectionType();
            this.thoroughfareNumberSuffixField = new List<ThoroughfareNumberSuffix>();
            this.thoroughfareNumberPrefixField = new List<ThoroughfareNumberPrefix>();
            this.itemsField = new List<object>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumber", typeof(ThoroughfareNumber))]
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberRange", typeof(ThoroughfareThoroughfareNumberRange))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumberPrefix> ThoroughfareNumberPrefix {
            get {
                return this.thoroughfareNumberPrefixField;
            }
            set {
                this.thoroughfareNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumberSuffix> ThoroughfareNumberSuffix {
            get {
                return this.thoroughfareNumberSuffixField;
            }
            set {
                this.thoroughfareNumberSuffixField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfarePreDirectionType ThoroughfarePreDirection {
            get {
                return this.thoroughfarePreDirectionField;
            }
            set {
                this.thoroughfarePreDirectionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareLeadingTypeType ThoroughfareLeadingType {
            get {
                return this.thoroughfareLeadingTypeField;
            }
            set {
                this.thoroughfareLeadingTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNameType> ThoroughfareName {
            get {
                return this.thoroughfareNameField;
            }
            set {
                this.thoroughfareNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareTrailingTypeType ThoroughfareTrailingType {
            get {
                return this.thoroughfareTrailingTypeField;
            }
            set {
                this.thoroughfareTrailingTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfarePostDirectionType ThoroughfarePostDirection {
            get {
                return this.thoroughfarePostDirectionField;
            }
            set {
                this.thoroughfarePostDirectionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareDependentThoroughfare DependentThoroughfare {
            get {
                return this.dependentThoroughfareField;
            }
            set {
                this.dependentThoroughfareField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DependentLocality", typeof(DependentLocalityType))]
        [System.Xml.Serialization.XmlElementAttribute("Firm", typeof(FirmType))]
        [System.Xml.Serialization.XmlElementAttribute("PostalCode", typeof(PostalCode))]
        [System.Xml.Serialization.XmlElementAttribute("Premise", typeof(Premise))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DependentThoroughfaresSpecified {
            get {
                return this.dependentThoroughfaresFieldSpecified;
            }
            set {
                this.dependentThoroughfaresFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DependentThoroughfaresIndicator {
            get {
                return this.dependentThoroughfaresIndicatorField;
            }
            set {
                this.dependentThoroughfaresIndicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DependentThoroughfaresConnector {
            get {
                return this.dependentThoroughfaresConnectorField;
            }
            set {
                this.dependentThoroughfaresConnectorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DependentThoroughfaresType {
            get {
                return this.dependentThoroughfaresTypeField;
            }
            set {
                this.dependentThoroughfaresTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Thoroughfare));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Thoroughfare object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Thoroughfare object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Thoroughfare object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Thoroughfare obj, out System.Exception exception) {
            exception = null;
            obj = default(Thoroughfare);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Thoroughfare obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Thoroughfare Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Thoroughfare)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Thoroughfare object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Thoroughfare object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Thoroughfare object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Thoroughfare obj, out System.Exception exception) {
            exception = null;
            obj = default(Thoroughfare);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Thoroughfare obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Thoroughfare LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Thoroughfare object
        /// </summary>
        public virtual Thoroughfare Clone() {
            return ((Thoroughfare)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareNumber {
        
        private bool numberTypeFieldSpecified;
        
        private string typeField;
        
        private string indicatorField;
        
        private bool indicatorOccurrenceFieldSpecified;
        
        private bool numberOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareNumberNumberType NumberType {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareNumberIndicatorOccurrence IndicatorOccurrence {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareNumberNumberOccurrence NumberOccurrence {get; set;}

        
        /// <summary>
        /// ThoroughfareNumber class constructor
        /// </summary>
        public ThoroughfareNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberTypeSpecified {
            get {
                return this.numberTypeFieldSpecified;
            }
            set {
                this.numberTypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndicatorOccurrenceSpecified {
            get {
                return this.indicatorOccurrenceFieldSpecified;
            }
            set {
                this.indicatorOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberOccurrenceSpecified {
            get {
                return this.numberOccurrenceFieldSpecified;
            }
            set {
                this.numberOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareNumber object
        /// </summary>
        public virtual ThoroughfareNumber Clone() {
            return ((ThoroughfareNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareNumberNumberType {
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        Range,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareNumberIndicatorOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareNumberNumberOccurrence {
        
        /// <remarks/>
        BeforeName,
        
        /// <remarks/>
        AfterName,
        
        /// <remarks/>
        BeforeType,
        
        /// <remarks/>
        AfterType,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareThoroughfareNumberRange", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareThoroughfareNumberRange {
        
        private List<AddressLine> addressLineField;
        
        private ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom thoroughfareNumberFromField;
        
        private ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo thoroughfareNumberToField;
        
        private bool rangeTypeFieldSpecified;
        
        private string indicatorField;
        
        private string separatorField;
        
        private bool indicatorOccurrenceFieldSpecified;
        
        private bool numberRangeOccurrenceFieldSpecified;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareThoroughfareNumberRangeRangeType RangeType {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareThoroughfareNumberRangeIndicatorOccurrence IndicatorOccurrence {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public ThoroughfareThoroughfareNumberRangeNumberRangeOccurrence NumberRangeOccurrence {get; set;}

        
        /// <summary>
        /// ThoroughfareThoroughfareNumberRange class constructor
        /// </summary>
        public ThoroughfareThoroughfareNumberRange() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.thoroughfareNumberToField = new ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo();
            this.thoroughfareNumberFromField = new ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom ThoroughfareNumberFrom {
            get {
                return this.thoroughfareNumberFromField;
            }
            set {
                this.thoroughfareNumberFromField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo ThoroughfareNumberTo {
            get {
                return this.thoroughfareNumberToField;
            }
            set {
                this.thoroughfareNumberToField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RangeTypeSpecified {
            get {
                return this.rangeTypeFieldSpecified;
            }
            set {
                this.rangeTypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Separator {
            get {
                return this.separatorField;
            }
            set {
                this.separatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndicatorOccurrenceSpecified {
            get {
                return this.indicatorOccurrenceFieldSpecified;
            }
            set {
                this.indicatorOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberRangeOccurrenceSpecified {
            get {
                return this.numberRangeOccurrenceFieldSpecified;
            }
            set {
                this.numberRangeOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareThoroughfareNumberRange));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareThoroughfareNumberRange object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareThoroughfareNumberRange object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareThoroughfareNumberRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareThoroughfareNumberRange obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareThoroughfareNumberRange);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareThoroughfareNumberRange obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareThoroughfareNumberRange Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareThoroughfareNumberRange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareThoroughfareNumberRange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareThoroughfareNumberRange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareThoroughfareNumberRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareThoroughfareNumberRange obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareThoroughfareNumberRange);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareThoroughfareNumberRange obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareThoroughfareNumberRange LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareThoroughfareNumberRange object
        /// </summary>
        public virtual ThoroughfareThoroughfareNumberRange Clone() {
            return ((ThoroughfareThoroughfareNumberRange)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom {
        
        private List<AddressLine> addressLineField;
        
        private List<ThoroughfareNumberPrefix> thoroughfareNumberPrefixField;
        
        private List<ThoroughfareNumber> thoroughfareNumberField;
        
        private List<ThoroughfareNumberSuffix> thoroughfareNumberSuffixField;
        
        private List<string> textField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom class constructor
        /// </summary>
        public ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.textField = new List<string>();
            this.thoroughfareNumberSuffixField = new List<ThoroughfareNumberSuffix>();
            this.thoroughfareNumberField = new List<ThoroughfareNumber>();
            this.thoroughfareNumberPrefixField = new List<ThoroughfareNumberPrefix>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumberPrefix> ThoroughfareNumberPrefix {
            get {
                return this.thoroughfareNumberPrefixField;
            }
            set {
                this.thoroughfareNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumber")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumber> ThoroughfareNumber {
            get {
                return this.thoroughfareNumberField;
            }
            set {
                this.thoroughfareNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumberSuffix> ThoroughfareNumberSuffix {
            get {
                return this.thoroughfareNumberSuffixField;
            }
            set {
                this.thoroughfareNumberSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom object
        /// </summary>
        public virtual ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom Clone() {
            return ((ThoroughfareThoroughfareNumberRangeThoroughfareNumberFrom)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareNumberPrefix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareNumberPrefix {
        
        private string numberPrefixSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareNumberPrefix class constructor
        /// </summary>
        public ThoroughfareNumberPrefix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberPrefixSeparator {
            get {
                return this.numberPrefixSeparatorField;
            }
            set {
                this.numberPrefixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareNumberPrefix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareNumberPrefix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareNumberPrefix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNumberPrefix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareNumberPrefix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareNumberPrefix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareNumberPrefix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareNumberPrefix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareNumberPrefix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNumberPrefix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareNumberPrefix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareNumberPrefix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareNumberPrefix object
        /// </summary>
        public virtual ThoroughfareNumberPrefix Clone() {
            return ((ThoroughfareNumberPrefix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareNumberSuffix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareNumberSuffix {
        
        private string numberSuffixSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareNumberSuffix class constructor
        /// </summary>
        public ThoroughfareNumberSuffix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberSuffixSeparator {
            get {
                return this.numberSuffixSeparatorField;
            }
            set {
                this.numberSuffixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareNumberSuffix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareNumberSuffix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareNumberSuffix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNumberSuffix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareNumberSuffix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareNumberSuffix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareNumberSuffix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareNumberSuffix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareNumberSuffix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNumberSuffix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareNumberSuffix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareNumberSuffix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareNumberSuffix object
        /// </summary>
        public virtual ThoroughfareNumberSuffix Clone() {
            return ((ThoroughfareNumberSuffix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo {
        
        private List<AddressLine> addressLineField;
        
        private List<ThoroughfareNumberPrefix> thoroughfareNumberPrefixField;
        
        private List<ThoroughfareNumber> thoroughfareNumberField;
        
        private List<ThoroughfareNumberSuffix> thoroughfareNumberSuffixField;
        
        private List<string> textField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo class constructor
        /// </summary>
        public ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.textField = new List<string>();
            this.thoroughfareNumberSuffixField = new List<ThoroughfareNumberSuffix>();
            this.thoroughfareNumberField = new List<ThoroughfareNumber>();
            this.thoroughfareNumberPrefixField = new List<ThoroughfareNumberPrefix>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumberPrefix> ThoroughfareNumberPrefix {
            get {
                return this.thoroughfareNumberPrefixField;
            }
            set {
                this.thoroughfareNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumber")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumber> ThoroughfareNumber {
            get {
                return this.thoroughfareNumberField;
            }
            set {
                this.thoroughfareNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNumberSuffix> ThoroughfareNumberSuffix {
            get {
                return this.thoroughfareNumberSuffixField;
            }
            set {
                this.thoroughfareNumberSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo object
        /// </summary>
        public virtual ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo Clone() {
            return ((ThoroughfareThoroughfareNumberRangeThoroughfareNumberTo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareThoroughfareNumberRangeRangeType {
        
        /// <remarks/>
        Odd,
        
        /// <remarks/>
        Even,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareThoroughfareNumberRangeIndicatorOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareThoroughfareNumberRangeNumberRangeOccurrence {
        
        /// <remarks/>
        BeforeName,
        
        /// <remarks/>
        AfterName,
        
        /// <remarks/>
        BeforeType,
        
        /// <remarks/>
        AfterType,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfarePreDirectionType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfarePreDirectionType {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfarePreDirectionType class constructor
        /// </summary>
        public ThoroughfarePreDirectionType() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfarePreDirectionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfarePreDirectionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfarePreDirectionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfarePreDirectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfarePreDirectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfarePreDirectionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfarePreDirectionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfarePreDirectionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfarePreDirectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfarePreDirectionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfarePreDirectionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfarePreDirectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfarePreDirectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfarePreDirectionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfarePreDirectionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfarePreDirectionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfarePreDirectionType object
        /// </summary>
        public virtual ThoroughfarePreDirectionType Clone() {
            return ((ThoroughfarePreDirectionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareLeadingTypeType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareLeadingTypeType {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareLeadingTypeType class constructor
        /// </summary>
        public ThoroughfareLeadingTypeType() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareLeadingTypeType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareLeadingTypeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareLeadingTypeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareLeadingTypeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareLeadingTypeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareLeadingTypeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareLeadingTypeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareLeadingTypeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareLeadingTypeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareLeadingTypeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareLeadingTypeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareLeadingTypeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareLeadingTypeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareLeadingTypeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareLeadingTypeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareLeadingTypeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareLeadingTypeType object
        /// </summary>
        public virtual ThoroughfareLeadingTypeType Clone() {
            return ((ThoroughfareLeadingTypeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareNameType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareNameType {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareNameType class constructor
        /// </summary>
        public ThoroughfareNameType() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareNameType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareNameType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareNameType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareNameType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNameType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareNameType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareNameType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareNameType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareNameType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareNameType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareNameType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareNameType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareNameType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareNameType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareNameType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareNameType object
        /// </summary>
        public virtual ThoroughfareNameType Clone() {
            return ((ThoroughfareNameType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareTrailingTypeType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareTrailingTypeType {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareTrailingTypeType class constructor
        /// </summary>
        public ThoroughfareTrailingTypeType() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareTrailingTypeType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareTrailingTypeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareTrailingTypeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareTrailingTypeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareTrailingTypeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareTrailingTypeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareTrailingTypeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareTrailingTypeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareTrailingTypeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareTrailingTypeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareTrailingTypeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareTrailingTypeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareTrailingTypeType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareTrailingTypeType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareTrailingTypeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareTrailingTypeType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareTrailingTypeType object
        /// </summary>
        public virtual ThoroughfareTrailingTypeType Clone() {
            return ((ThoroughfareTrailingTypeType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfarePostDirectionType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfarePostDirectionType {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfarePostDirectionType class constructor
        /// </summary>
        public ThoroughfarePostDirectionType() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfarePostDirectionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfarePostDirectionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfarePostDirectionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfarePostDirectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfarePostDirectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfarePostDirectionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfarePostDirectionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfarePostDirectionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfarePostDirectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfarePostDirectionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfarePostDirectionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfarePostDirectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfarePostDirectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfarePostDirectionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfarePostDirectionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfarePostDirectionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfarePostDirectionType object
        /// </summary>
        public virtual ThoroughfarePostDirectionType Clone() {
            return ((ThoroughfarePostDirectionType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThoroughfareDependentThoroughfare", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ThoroughfareDependentThoroughfare {
        
        private List<AddressLine> addressLineField;
        
        private ThoroughfarePreDirectionType thoroughfarePreDirectionField;
        
        private ThoroughfareLeadingTypeType thoroughfareLeadingTypeField;
        
        private List<ThoroughfareNameType> thoroughfareNameField;
        
        private ThoroughfareTrailingTypeType thoroughfareTrailingTypeField;
        
        private ThoroughfarePostDirectionType thoroughfarePostDirectionField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ThoroughfareDependentThoroughfare class constructor
        /// </summary>
        public ThoroughfareDependentThoroughfare() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.thoroughfarePostDirectionField = new ThoroughfarePostDirectionType();
            this.thoroughfareTrailingTypeField = new ThoroughfareTrailingTypeType();
            this.thoroughfareNameField = new List<ThoroughfareNameType>();
            this.thoroughfareLeadingTypeField = new ThoroughfareLeadingTypeType();
            this.thoroughfarePreDirectionField = new ThoroughfarePreDirectionType();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfarePreDirectionType ThoroughfarePreDirection {
            get {
                return this.thoroughfarePreDirectionField;
            }
            set {
                this.thoroughfarePreDirectionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareLeadingTypeType ThoroughfareLeadingType {
            get {
                return this.thoroughfareLeadingTypeField;
            }
            set {
                this.thoroughfareLeadingTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ThoroughfareName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ThoroughfareNameType> ThoroughfareName {
            get {
                return this.thoroughfareNameField;
            }
            set {
                this.thoroughfareNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfareTrailingTypeType ThoroughfareTrailingType {
            get {
                return this.thoroughfareTrailingTypeField;
            }
            set {
                this.thoroughfareTrailingTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ThoroughfarePostDirectionType ThoroughfarePostDirection {
            get {
                return this.thoroughfarePostDirectionField;
            }
            set {
                this.thoroughfarePostDirectionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ThoroughfareDependentThoroughfare));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ThoroughfareDependentThoroughfare object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ThoroughfareDependentThoroughfare object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ThoroughfareDependentThoroughfare object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ThoroughfareDependentThoroughfare obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareDependentThoroughfare);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ThoroughfareDependentThoroughfare obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ThoroughfareDependentThoroughfare Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ThoroughfareDependentThoroughfare)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ThoroughfareDependentThoroughfare object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ThoroughfareDependentThoroughfare object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ThoroughfareDependentThoroughfare object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ThoroughfareDependentThoroughfare obj, out System.Exception exception) {
            exception = null;
            obj = default(ThoroughfareDependentThoroughfare);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ThoroughfareDependentThoroughfare obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ThoroughfareDependentThoroughfare LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ThoroughfareDependentThoroughfare object
        /// </summary>
        public virtual ThoroughfareDependentThoroughfare Clone() {
            return ((ThoroughfareDependentThoroughfare)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DependentLocalityType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DependentLocalityType {
        
        private List<AddressLine> addressLineField;
        
        private List<DependentLocalityTypeDependentLocalityName> dependentLocalityNameField;
        
        private DependentLocalityTypeDependentLocalityNumber dependentLocalityNumberField;
        
        private object itemField;
        
        private Thoroughfare thoroughfareField;
        
        private Premise premiseField;
        
        private DependentLocalityType dependentLocalityField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string usageTypeField;
        
        private string connectorField;
        
        private string indicatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DependentLocalityType class constructor
        /// </summary>
        public DependentLocalityType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.dependentLocalityField = new DependentLocalityType();
            this.premiseField = new Premise();
            this.thoroughfareField = new Thoroughfare();
            this.dependentLocalityNumberField = new DependentLocalityTypeDependentLocalityNumber();
            this.dependentLocalityNameField = new List<DependentLocalityTypeDependentLocalityName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DependentLocalityName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<DependentLocalityTypeDependentLocalityName> DependentLocalityName {
            get {
                return this.dependentLocalityNameField;
            }
            set {
                this.dependentLocalityNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DependentLocalityTypeDependentLocalityNumber DependentLocalityNumber {
            get {
                return this.dependentLocalityNumberField;
            }
            set {
                this.dependentLocalityNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("LargeMailUser", typeof(LargeMailUserType))]
        [System.Xml.Serialization.XmlElementAttribute("PostBox", typeof(PostBox))]
        [System.Xml.Serialization.XmlElementAttribute("PostOffice", typeof(PostOffice))]
        [System.Xml.Serialization.XmlElementAttribute("PostalRoute", typeof(PostalRouteType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Thoroughfare Thoroughfare {
            get {
                return this.thoroughfareField;
            }
            set {
                this.thoroughfareField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Premise Premise {
            get {
                return this.premiseField;
            }
            set {
                this.premiseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DependentLocalityType DependentLocality {
            get {
                return this.dependentLocalityField;
            }
            set {
                this.dependentLocalityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsageType {
            get {
                return this.usageTypeField;
            }
            set {
                this.usageTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Connector {
            get {
                return this.connectorField;
            }
            set {
                this.connectorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DependentLocalityType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DependentLocalityType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DependentLocalityType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DependentLocalityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DependentLocalityType obj, out System.Exception exception) {
            exception = null;
            obj = default(DependentLocalityType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DependentLocalityType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DependentLocalityType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DependentLocalityType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DependentLocalityType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DependentLocalityType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DependentLocalityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DependentLocalityType obj, out System.Exception exception) {
            exception = null;
            obj = default(DependentLocalityType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DependentLocalityType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DependentLocalityType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DependentLocalityType object
        /// </summary>
        public virtual DependentLocalityType Clone() {
            return ((DependentLocalityType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DependentLocalityTypeDependentLocalityName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DependentLocalityTypeDependentLocalityName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DependentLocalityTypeDependentLocalityName class constructor
        /// </summary>
        public DependentLocalityTypeDependentLocalityName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DependentLocalityTypeDependentLocalityName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DependentLocalityTypeDependentLocalityName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DependentLocalityTypeDependentLocalityName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DependentLocalityTypeDependentLocalityName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DependentLocalityTypeDependentLocalityName obj, out System.Exception exception) {
            exception = null;
            obj = default(DependentLocalityTypeDependentLocalityName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DependentLocalityTypeDependentLocalityName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DependentLocalityTypeDependentLocalityName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DependentLocalityTypeDependentLocalityName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DependentLocalityTypeDependentLocalityName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DependentLocalityTypeDependentLocalityName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DependentLocalityTypeDependentLocalityName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DependentLocalityTypeDependentLocalityName obj, out System.Exception exception) {
            exception = null;
            obj = default(DependentLocalityTypeDependentLocalityName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DependentLocalityTypeDependentLocalityName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DependentLocalityTypeDependentLocalityName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DependentLocalityTypeDependentLocalityName object
        /// </summary>
        public virtual DependentLocalityTypeDependentLocalityName Clone() {
            return ((DependentLocalityTypeDependentLocalityName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DependentLocalityTypeDependentLocalityNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DependentLocalityTypeDependentLocalityNumber {
        
        private bool nameNumberOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public DependentLocalityTypeDependentLocalityNumberNameNumberOccurrence NameNumberOccurrence {get; set;}

        
        /// <summary>
        /// DependentLocalityTypeDependentLocalityNumber class constructor
        /// </summary>
        public DependentLocalityTypeDependentLocalityNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NameNumberOccurrenceSpecified {
            get {
                return this.nameNumberOccurrenceFieldSpecified;
            }
            set {
                this.nameNumberOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DependentLocalityTypeDependentLocalityNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DependentLocalityTypeDependentLocalityNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DependentLocalityTypeDependentLocalityNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DependentLocalityTypeDependentLocalityNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DependentLocalityTypeDependentLocalityNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(DependentLocalityTypeDependentLocalityNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DependentLocalityTypeDependentLocalityNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DependentLocalityTypeDependentLocalityNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DependentLocalityTypeDependentLocalityNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DependentLocalityTypeDependentLocalityNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DependentLocalityTypeDependentLocalityNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DependentLocalityTypeDependentLocalityNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DependentLocalityTypeDependentLocalityNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(DependentLocalityTypeDependentLocalityNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DependentLocalityTypeDependentLocalityNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DependentLocalityTypeDependentLocalityNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DependentLocalityTypeDependentLocalityNumber object
        /// </summary>
        public virtual DependentLocalityTypeDependentLocalityNumber Clone() {
            return ((DependentLocalityTypeDependentLocalityNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum DependentLocalityTypeDependentLocalityNumberNameNumberOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostOffice", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostOffice {
        
        private List<AddressLine> addressLineField;
        
        private List<object> itemsField;
        
        private PostalRouteType postalRouteField;
        
        private PostBox postBoxField;
        
        private PostalCode postalCodeField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string indicatorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostOffice class constructor
        /// </summary>
        public PostOffice() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postalCodeField = new PostalCode();
            this.postBoxField = new PostBox();
            this.postalRouteField = new PostalRouteType();
            this.itemsField = new List<object>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PostOfficeName", typeof(PostOfficePostOfficeName))]
        [System.Xml.Serialization.XmlElementAttribute("PostOfficeNumber", typeof(PostOfficePostOfficeNumber))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalRouteType PostalRoute {
            get {
                return this.postalRouteField;
            }
            set {
                this.postalRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBox PostBox {
            get {
                return this.postBoxField;
            }
            set {
                this.postBoxField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostOffice));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostOffice object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostOffice object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostOffice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostOffice obj, out System.Exception exception) {
            exception = null;
            obj = default(PostOffice);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostOffice obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostOffice Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostOffice)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostOffice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostOffice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostOffice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostOffice obj, out System.Exception exception) {
            exception = null;
            obj = default(PostOffice);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostOffice obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostOffice LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostOffice object
        /// </summary>
        public virtual PostOffice Clone() {
            return ((PostOffice)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostOfficePostOfficeName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostOfficePostOfficeName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostOfficePostOfficeName class constructor
        /// </summary>
        public PostOfficePostOfficeName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostOfficePostOfficeName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostOfficePostOfficeName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostOfficePostOfficeName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostOfficePostOfficeName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostOfficePostOfficeName obj, out System.Exception exception) {
            exception = null;
            obj = default(PostOfficePostOfficeName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostOfficePostOfficeName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostOfficePostOfficeName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostOfficePostOfficeName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostOfficePostOfficeName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostOfficePostOfficeName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostOfficePostOfficeName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostOfficePostOfficeName obj, out System.Exception exception) {
            exception = null;
            obj = default(PostOfficePostOfficeName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostOfficePostOfficeName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostOfficePostOfficeName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostOfficePostOfficeName object
        /// </summary>
        public virtual PostOfficePostOfficeName Clone() {
            return ((PostOfficePostOfficeName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostOfficePostOfficeNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostOfficePostOfficeNumber {
        
        private string indicatorField;
        
        private bool indicatorOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PostOfficePostOfficeNumberIndicatorOccurrence IndicatorOccurrence {get; set;}

        
        /// <summary>
        /// PostOfficePostOfficeNumber class constructor
        /// </summary>
        public PostOfficePostOfficeNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndicatorOccurrenceSpecified {
            get {
                return this.indicatorOccurrenceFieldSpecified;
            }
            set {
                this.indicatorOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostOfficePostOfficeNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostOfficePostOfficeNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostOfficePostOfficeNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostOfficePostOfficeNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostOfficePostOfficeNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostOfficePostOfficeNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostOfficePostOfficeNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostOfficePostOfficeNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostOfficePostOfficeNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostOfficePostOfficeNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostOfficePostOfficeNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostOfficePostOfficeNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostOfficePostOfficeNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostOfficePostOfficeNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostOfficePostOfficeNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostOfficePostOfficeNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostOfficePostOfficeNumber object
        /// </summary>
        public virtual PostOfficePostOfficeNumber Clone() {
            return ((PostOfficePostOfficeNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PostOfficePostOfficeNumberIndicatorOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalRouteType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalRouteType {
        
        private List<AddressLine> addressLineField;
        
        private List<object> itemsField;
        
        private PostBox postBoxField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalRouteType class constructor
        /// </summary>
        public PostalRouteType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.postBoxField = new PostBox();
            this.itemsField = new List<object>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PostalRouteName", typeof(PostalRouteTypePostalRouteName))]
        [System.Xml.Serialization.XmlElementAttribute("PostalRouteNumber", typeof(PostalRouteTypePostalRouteNumber))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostBox PostBox {
            get {
                return this.postBoxField;
            }
            set {
                this.postBoxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalRouteType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalRouteType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalRouteType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalRouteType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalRouteType obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalRouteType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalRouteType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalRouteType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalRouteType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalRouteType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalRouteType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalRouteType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalRouteType obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalRouteType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalRouteType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalRouteType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalRouteType object
        /// </summary>
        public virtual PostalRouteType Clone() {
            return ((PostalRouteType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalRouteTypePostalRouteName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalRouteTypePostalRouteName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalRouteTypePostalRouteName class constructor
        /// </summary>
        public PostalRouteTypePostalRouteName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalRouteTypePostalRouteName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalRouteTypePostalRouteName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalRouteTypePostalRouteName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalRouteTypePostalRouteName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalRouteTypePostalRouteName obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalRouteTypePostalRouteName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalRouteTypePostalRouteName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalRouteTypePostalRouteName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalRouteTypePostalRouteName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalRouteTypePostalRouteName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalRouteTypePostalRouteName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalRouteTypePostalRouteName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalRouteTypePostalRouteName obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalRouteTypePostalRouteName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalRouteTypePostalRouteName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalRouteTypePostalRouteName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalRouteTypePostalRouteName object
        /// </summary>
        public virtual PostalRouteTypePostalRouteName Clone() {
            return ((PostalRouteTypePostalRouteName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostalRouteTypePostalRouteNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PostalRouteTypePostalRouteNumber {
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PostalRouteTypePostalRouteNumber class constructor
        /// </summary>
        public PostalRouteTypePostalRouteNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PostalRouteTypePostalRouteNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalRouteTypePostalRouteNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PostalRouteTypePostalRouteNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalRouteTypePostalRouteNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PostalRouteTypePostalRouteNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalRouteTypePostalRouteNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PostalRouteTypePostalRouteNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PostalRouteTypePostalRouteNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PostalRouteTypePostalRouteNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PostalRouteTypePostalRouteNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PostalRouteTypePostalRouteNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalRouteTypePostalRouteNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PostalRouteTypePostalRouteNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PostalRouteTypePostalRouteNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PostalRouteTypePostalRouteNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PostalRouteTypePostalRouteNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PostalRouteTypePostalRouteNumber object
        /// </summary>
        public virtual PostalRouteTypePostalRouteNumber Clone() {
            return ((PostalRouteTypePostalRouteNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Premise", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class Premise {
        
        private List<AddressLine> addressLineField;
        
        private List<PremisePremiseName> premiseNameField;
        
        private List<object> itemsField;
        
        private List<PremiseNumberPrefix> premiseNumberPrefixField;
        
        private List<PremiseNumberSuffix> premiseNumberSuffixField;
        
        private List<BuildingNameType> buildingNameField;
        
        private List<object> items1Field;
        
        private MailStopType mailStopField;
        
        private PostalCode postalCodeField;
        
        private Premise premise1Field;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private string premiseDependencyField;
        
        private string premiseDependencyTypeField;
        
        private string premiseThoroughfareConnectorField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Premise class constructor
        /// </summary>
        public Premise() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.premise1Field = new Premise();
            this.postalCodeField = new PostalCode();
            this.mailStopField = new MailStopType();
            this.items1Field = new List<object>();
            this.buildingNameField = new List<BuildingNameType>();
            this.premiseNumberSuffixField = new List<PremiseNumberSuffix>();
            this.premiseNumberPrefixField = new List<PremiseNumberPrefix>();
            this.itemsField = new List<object>();
            this.premiseNameField = new List<PremisePremiseName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremisePremiseName> PremiseName {
            get {
                return this.premiseNameField;
            }
            set {
                this.premiseNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseLocation", typeof(PremisePremiseLocation))]
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumber", typeof(PremiseNumber))]
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberRange", typeof(PremisePremiseNumberRange))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumberPrefix> PremiseNumberPrefix {
            get {
                return this.premiseNumberPrefixField;
            }
            set {
                this.premiseNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumberSuffix> PremiseNumberSuffix {
            get {
                return this.premiseNumberSuffixField;
            }
            set {
                this.premiseNumberSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BuildingName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<BuildingNameType> BuildingName {
            get {
                return this.buildingNameField;
            }
            set {
                this.buildingNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Firm", typeof(FirmType))]
        [System.Xml.Serialization.XmlElementAttribute("SubPremise", typeof(SubPremiseType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items1 {
            get {
                return this.items1Field;
            }
            set {
                this.items1Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MailStopType MailStop {
            get {
                return this.mailStopField;
            }
            set {
                this.mailStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Premise")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Premise Premise1 {
            get {
                return this.premise1Field;
            }
            set {
                this.premise1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PremiseDependency {
            get {
                return this.premiseDependencyField;
            }
            set {
                this.premiseDependencyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PremiseDependencyType {
            get {
                return this.premiseDependencyTypeField;
            }
            set {
                this.premiseDependencyTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PremiseThoroughfareConnector {
            get {
                return this.premiseThoroughfareConnectorField;
            }
            set {
                this.premiseThoroughfareConnectorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Premise));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Premise object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Premise object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Premise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Premise obj, out System.Exception exception) {
            exception = null;
            obj = default(Premise);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Premise obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Premise Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Premise)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Premise object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Premise object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Premise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Premise obj, out System.Exception exception) {
            exception = null;
            obj = default(Premise);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Premise obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Premise LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Premise object
        /// </summary>
        public virtual Premise Clone() {
            return ((Premise)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremisePremiseName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremisePremiseName {
        
        private string typeField;
        
        private bool typeOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PremisePremiseNameTypeOccurrence TypeOccurrence {get; set;}

        
        /// <summary>
        /// PremisePremiseName class constructor
        /// </summary>
        public PremisePremiseName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeOccurrenceSpecified {
            get {
                return this.typeOccurrenceFieldSpecified;
            }
            set {
                this.typeOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremisePremiseName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremisePremiseName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremisePremiseName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremisePremiseName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremisePremiseName obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremisePremiseName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremisePremiseName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremisePremiseName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremisePremiseName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremisePremiseName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremisePremiseName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremisePremiseName obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremisePremiseName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremisePremiseName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremisePremiseName object
        /// </summary>
        public virtual PremisePremiseName Clone() {
            return ((PremisePremiseName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PremisePremiseNameTypeOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremisePremiseLocation", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremisePremiseLocation {
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PremisePremiseLocation class constructor
        /// </summary>
        public PremisePremiseLocation() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremisePremiseLocation));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremisePremiseLocation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremisePremiseLocation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremisePremiseLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremisePremiseLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseLocation);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremisePremiseLocation obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremisePremiseLocation Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremisePremiseLocation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremisePremiseLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremisePremiseLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremisePremiseLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremisePremiseLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseLocation);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremisePremiseLocation obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremisePremiseLocation LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremisePremiseLocation object
        /// </summary>
        public virtual PremisePremiseLocation Clone() {
            return ((PremisePremiseLocation)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremiseNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremiseNumber {
        
        private bool numberTypeFieldSpecified;
        
        private string typeField;
        
        private string indicatorField;
        
        private bool indicatorOccurrenceFieldSpecified;
        
        private bool numberTypeOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PremiseNumberNumberType NumberType {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PremiseNumberIndicatorOccurrence IndicatorOccurrence {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PremiseNumberNumberTypeOccurrence NumberTypeOccurrence {get; set;}

        
        /// <summary>
        /// PremiseNumber class constructor
        /// </summary>
        public PremiseNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberTypeSpecified {
            get {
                return this.numberTypeFieldSpecified;
            }
            set {
                this.numberTypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndicatorOccurrenceSpecified {
            get {
                return this.indicatorOccurrenceFieldSpecified;
            }
            set {
                this.indicatorOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberTypeOccurrenceSpecified {
            get {
                return this.numberTypeOccurrenceFieldSpecified;
            }
            set {
                this.numberTypeOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremiseNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremiseNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremiseNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremiseNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremiseNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PremiseNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremiseNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremiseNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremiseNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremiseNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremiseNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremiseNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremiseNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(PremiseNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremiseNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremiseNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremiseNumber object
        /// </summary>
        public virtual PremiseNumber Clone() {
            return ((PremiseNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PremiseNumberNumberType {
        
        /// <remarks/>
        Single,
        
        /// <remarks/>
        Range,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PremiseNumberIndicatorOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PremiseNumberNumberTypeOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremisePremiseNumberRange", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremisePremiseNumberRange {
        
        private PremisePremiseNumberRangePremiseNumberRangeFrom premiseNumberRangeFromField;
        
        private PremisePremiseNumberRangePremiseNumberRangeTo premiseNumberRangeToField;
        
        private string rangeTypeField;
        
        private string indicatorField;
        
        private string separatorField;
        
        private string typeField;
        
        private bool indicatorOccurenceFieldSpecified;
        
        private bool numberRangeOccurenceFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PremisePremiseNumberRangeIndicatorOccurence IndicatorOccurence {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public PremisePremiseNumberRangeNumberRangeOccurence NumberRangeOccurence {get; set;}

        
        /// <summary>
        /// PremisePremiseNumberRange class constructor
        /// </summary>
        public PremisePremiseNumberRange() {
            this.premiseNumberRangeToField = new PremisePremiseNumberRangePremiseNumberRangeTo();
            this.premiseNumberRangeFromField = new PremisePremiseNumberRangePremiseNumberRangeFrom();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PremisePremiseNumberRangePremiseNumberRangeFrom PremiseNumberRangeFrom {
            get {
                return this.premiseNumberRangeFromField;
            }
            set {
                this.premiseNumberRangeFromField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PremisePremiseNumberRangePremiseNumberRangeTo PremiseNumberRangeTo {
            get {
                return this.premiseNumberRangeToField;
            }
            set {
                this.premiseNumberRangeToField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RangeType {
            get {
                return this.rangeTypeField;
            }
            set {
                this.rangeTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Separator {
            get {
                return this.separatorField;
            }
            set {
                this.separatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndicatorOccurenceSpecified {
            get {
                return this.indicatorOccurenceFieldSpecified;
            }
            set {
                this.indicatorOccurenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberRangeOccurenceSpecified {
            get {
                return this.numberRangeOccurenceFieldSpecified;
            }
            set {
                this.numberRangeOccurenceFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremisePremiseNumberRange));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremisePremiseNumberRange object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremisePremiseNumberRange object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremisePremiseNumberRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremisePremiseNumberRange obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseNumberRange);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremisePremiseNumberRange obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremisePremiseNumberRange Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremisePremiseNumberRange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremisePremiseNumberRange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremisePremiseNumberRange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremisePremiseNumberRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremisePremiseNumberRange obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseNumberRange);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremisePremiseNumberRange obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremisePremiseNumberRange LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremisePremiseNumberRange object
        /// </summary>
        public virtual PremisePremiseNumberRange Clone() {
            return ((PremisePremiseNumberRange)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremisePremiseNumberRangePremiseNumberRangeFrom", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremisePremiseNumberRangePremiseNumberRangeFrom {
        
        private List<AddressLine> addressLineField;
        
        private List<PremiseNumberPrefix> premiseNumberPrefixField;
        
        private List<PremiseNumber> premiseNumberField;
        
        private List<PremiseNumberSuffix> premiseNumberSuffixField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PremisePremiseNumberRangePremiseNumberRangeFrom class constructor
        /// </summary>
        public PremisePremiseNumberRangePremiseNumberRangeFrom() {
            this.premiseNumberSuffixField = new List<PremiseNumberSuffix>();
            this.premiseNumberField = new List<PremiseNumber>();
            this.premiseNumberPrefixField = new List<PremiseNumberPrefix>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumberPrefix> PremiseNumberPrefix {
            get {
                return this.premiseNumberPrefixField;
            }
            set {
                this.premiseNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumber")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumber> PremiseNumber {
            get {
                return this.premiseNumberField;
            }
            set {
                this.premiseNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumberSuffix> PremiseNumberSuffix {
            get {
                return this.premiseNumberSuffixField;
            }
            set {
                this.premiseNumberSuffixField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremisePremiseNumberRangePremiseNumberRangeFrom));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremisePremiseNumberRangePremiseNumberRangeFrom object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremisePremiseNumberRangePremiseNumberRangeFrom object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremisePremiseNumberRangePremiseNumberRangeFrom object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremisePremiseNumberRangePremiseNumberRangeFrom obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseNumberRangePremiseNumberRangeFrom);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremisePremiseNumberRangePremiseNumberRangeFrom obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremisePremiseNumberRangePremiseNumberRangeFrom Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremisePremiseNumberRangePremiseNumberRangeFrom)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremisePremiseNumberRangePremiseNumberRangeFrom object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremisePremiseNumberRangePremiseNumberRangeFrom object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremisePremiseNumberRangePremiseNumberRangeFrom object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremisePremiseNumberRangePremiseNumberRangeFrom obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseNumberRangePremiseNumberRangeFrom);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremisePremiseNumberRangePremiseNumberRangeFrom obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremisePremiseNumberRangePremiseNumberRangeFrom LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremisePremiseNumberRangePremiseNumberRangeFrom object
        /// </summary>
        public virtual PremisePremiseNumberRangePremiseNumberRangeFrom Clone() {
            return ((PremisePremiseNumberRangePremiseNumberRangeFrom)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremiseNumberPrefix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremiseNumberPrefix {
        
        private string numberPrefixSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PremiseNumberPrefix class constructor
        /// </summary>
        public PremiseNumberPrefix() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberPrefixSeparator {
            get {
                return this.numberPrefixSeparatorField;
            }
            set {
                this.numberPrefixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremiseNumberPrefix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremiseNumberPrefix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremiseNumberPrefix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremiseNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremiseNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(PremiseNumberPrefix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremiseNumberPrefix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremiseNumberPrefix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremiseNumberPrefix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremiseNumberPrefix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremiseNumberPrefix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremiseNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremiseNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(PremiseNumberPrefix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremiseNumberPrefix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremiseNumberPrefix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremiseNumberPrefix object
        /// </summary>
        public virtual PremiseNumberPrefix Clone() {
            return ((PremiseNumberPrefix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremiseNumberSuffix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremiseNumberSuffix {
        
        private string numberSuffixSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PremiseNumberSuffix class constructor
        /// </summary>
        public PremiseNumberSuffix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberSuffixSeparator {
            get {
                return this.numberSuffixSeparatorField;
            }
            set {
                this.numberSuffixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremiseNumberSuffix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremiseNumberSuffix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremiseNumberSuffix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremiseNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremiseNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(PremiseNumberSuffix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremiseNumberSuffix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremiseNumberSuffix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremiseNumberSuffix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremiseNumberSuffix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremiseNumberSuffix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremiseNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremiseNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(PremiseNumberSuffix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremiseNumberSuffix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremiseNumberSuffix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremiseNumberSuffix object
        /// </summary>
        public virtual PremiseNumberSuffix Clone() {
            return ((PremiseNumberSuffix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PremisePremiseNumberRangePremiseNumberRangeTo", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PremisePremiseNumberRangePremiseNumberRangeTo {
        
        private List<AddressLine> addressLineField;
        
        private List<PremiseNumberPrefix> premiseNumberPrefixField;
        
        private List<PremiseNumber> premiseNumberField;
        
        private List<PremiseNumberSuffix> premiseNumberSuffixField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PremisePremiseNumberRangePremiseNumberRangeTo class constructor
        /// </summary>
        public PremisePremiseNumberRangePremiseNumberRangeTo() {
            this.premiseNumberSuffixField = new List<PremiseNumberSuffix>();
            this.premiseNumberField = new List<PremiseNumber>();
            this.premiseNumberPrefixField = new List<PremiseNumberPrefix>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumberPrefix> PremiseNumberPrefix {
            get {
                return this.premiseNumberPrefixField;
            }
            set {
                this.premiseNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumber")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumber> PremiseNumber {
            get {
                return this.premiseNumberField;
            }
            set {
                this.premiseNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PremiseNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PremiseNumberSuffix> PremiseNumberSuffix {
            get {
                return this.premiseNumberSuffixField;
            }
            set {
                this.premiseNumberSuffixField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PremisePremiseNumberRangePremiseNumberRangeTo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PremisePremiseNumberRangePremiseNumberRangeTo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PremisePremiseNumberRangePremiseNumberRangeTo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PremisePremiseNumberRangePremiseNumberRangeTo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PremisePremiseNumberRangePremiseNumberRangeTo obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseNumberRangePremiseNumberRangeTo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PremisePremiseNumberRangePremiseNumberRangeTo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PremisePremiseNumberRangePremiseNumberRangeTo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PremisePremiseNumberRangePremiseNumberRangeTo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PremisePremiseNumberRangePremiseNumberRangeTo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PremisePremiseNumberRangePremiseNumberRangeTo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PremisePremiseNumberRangePremiseNumberRangeTo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PremisePremiseNumberRangePremiseNumberRangeTo obj, out System.Exception exception) {
            exception = null;
            obj = default(PremisePremiseNumberRangePremiseNumberRangeTo);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PremisePremiseNumberRangePremiseNumberRangeTo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PremisePremiseNumberRangePremiseNumberRangeTo LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PremisePremiseNumberRangePremiseNumberRangeTo object
        /// </summary>
        public virtual PremisePremiseNumberRangePremiseNumberRangeTo Clone() {
            return ((PremisePremiseNumberRangePremiseNumberRangeTo)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PremisePremiseNumberRangeIndicatorOccurence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum PremisePremiseNumberRangeNumberRangeOccurence {
        
        /// <remarks/>
        BeforeName,
        
        /// <remarks/>
        AfterName,
        
        /// <remarks/>
        BeforeType,
        
        /// <remarks/>
        AfterType,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubPremiseType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SubPremiseType {
        
        private List<AddressLine> addressLineField;
        
        private List<SubPremiseTypeSubPremiseName> subPremiseNameField;
        
        private List<object> itemsField;
        
        private List<SubPremiseTypeSubPremiseNumberPrefix> subPremiseNumberPrefixField;
        
        private List<SubPremiseTypeSubPremiseNumberSuffix> subPremiseNumberSuffixField;
        
        private List<BuildingNameType> buildingNameField;
        
        private FirmType firmField;
        
        private MailStopType mailStopField;
        
        private PostalCode postalCodeField;
        
        private SubPremiseType subPremiseField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private string typeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SubPremiseType class constructor
        /// </summary>
        public SubPremiseType() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.subPremiseField = new SubPremiseType();
            this.postalCodeField = new PostalCode();
            this.mailStopField = new MailStopType();
            this.firmField = new FirmType();
            this.buildingNameField = new List<BuildingNameType>();
            this.subPremiseNumberSuffixField = new List<SubPremiseTypeSubPremiseNumberSuffix>();
            this.subPremiseNumberPrefixField = new List<SubPremiseTypeSubPremiseNumberPrefix>();
            this.itemsField = new List<object>();
            this.subPremiseNameField = new List<SubPremiseTypeSubPremiseName>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SubPremiseName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SubPremiseTypeSubPremiseName> SubPremiseName {
            get {
                return this.subPremiseNameField;
            }
            set {
                this.subPremiseNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SubPremiseLocation", typeof(SubPremiseTypeSubPremiseLocation))]
        [System.Xml.Serialization.XmlElementAttribute("SubPremiseNumber", typeof(SubPremiseTypeSubPremiseNumber))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SubPremiseNumberPrefix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SubPremiseTypeSubPremiseNumberPrefix> SubPremiseNumberPrefix {
            get {
                return this.subPremiseNumberPrefixField;
            }
            set {
                this.subPremiseNumberPrefixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SubPremiseNumberSuffix")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SubPremiseTypeSubPremiseNumberSuffix> SubPremiseNumberSuffix {
            get {
                return this.subPremiseNumberSuffixField;
            }
            set {
                this.subPremiseNumberSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("BuildingName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<BuildingNameType> BuildingName {
            get {
                return this.buildingNameField;
            }
            set {
                this.buildingNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FirmType Firm {
            get {
                return this.firmField;
            }
            set {
                this.firmField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MailStopType MailStop {
            get {
                return this.mailStopField;
            }
            set {
                this.mailStopField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PostalCode PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SubPremiseType SubPremise {
            get {
                return this.subPremiseField;
            }
            set {
                this.subPremiseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubPremiseType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubPremiseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubPremiseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubPremiseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubPremiseType obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubPremiseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubPremiseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubPremiseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubPremiseType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubPremiseType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubPremiseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SubPremiseType obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubPremiseType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubPremiseType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SubPremiseType object
        /// </summary>
        public virtual SubPremiseType Clone() {
            return ((SubPremiseType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubPremiseTypeSubPremiseName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SubPremiseTypeSubPremiseName {
        
        private string typeField;
        
        private bool typeOccurrenceFieldSpecified;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public SubPremiseTypeSubPremiseNameTypeOccurrence TypeOccurrence {get; set;}

        
        /// <summary>
        /// SubPremiseTypeSubPremiseName class constructor
        /// </summary>
        public SubPremiseTypeSubPremiseName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeOccurrenceSpecified {
            get {
                return this.typeOccurrenceFieldSpecified;
            }
            set {
                this.typeOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubPremiseTypeSubPremiseName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubPremiseTypeSubPremiseName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseName obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubPremiseTypeSubPremiseName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubPremiseTypeSubPremiseName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseName obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SubPremiseTypeSubPremiseName object
        /// </summary>
        public virtual SubPremiseTypeSubPremiseName Clone() {
            return ((SubPremiseTypeSubPremiseName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum SubPremiseTypeSubPremiseNameTypeOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubPremiseTypeSubPremiseLocation", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SubPremiseTypeSubPremiseLocation {
        
        private string codeField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SubPremiseTypeSubPremiseLocation class constructor
        /// </summary>
        public SubPremiseTypeSubPremiseLocation() {
            this.textField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubPremiseTypeSubPremiseLocation));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseLocation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubPremiseTypeSubPremiseLocation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseLocation);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseLocation obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseLocation Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubPremiseTypeSubPremiseLocation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubPremiseTypeSubPremiseLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseLocation);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseLocation obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseLocation LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SubPremiseTypeSubPremiseLocation object
        /// </summary>
        public virtual SubPremiseTypeSubPremiseLocation Clone() {
            return ((SubPremiseTypeSubPremiseLocation)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubPremiseTypeSubPremiseNumber", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SubPremiseTypeSubPremiseNumber {
        
        private string indicatorField;
        
        private bool indicatorOccurrenceFieldSpecified;
        
        private bool numberTypeOccurrenceFieldSpecified;
        
        private string premiseNumberSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public SubPremiseTypeSubPremiseNumberIndicatorOccurrence IndicatorOccurrence {get; set;}

    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public SubPremiseTypeSubPremiseNumberNumberTypeOccurrence NumberTypeOccurrence {get; set;}

        
        /// <summary>
        /// SubPremiseTypeSubPremiseNumber class constructor
        /// </summary>
        public SubPremiseTypeSubPremiseNumber() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Indicator {
            get {
                return this.indicatorField;
            }
            set {
                this.indicatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IndicatorOccurrenceSpecified {
            get {
                return this.indicatorOccurrenceFieldSpecified;
            }
            set {
                this.indicatorOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NumberTypeOccurrenceSpecified {
            get {
                return this.numberTypeOccurrenceFieldSpecified;
            }
            set {
                this.numberTypeOccurrenceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PremiseNumberSeparator {
            get {
                return this.premiseNumberSeparatorField;
            }
            set {
                this.premiseNumberSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubPremiseTypeSubPremiseNumber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseNumber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubPremiseTypeSubPremiseNumber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseNumber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseNumber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseNumber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubPremiseTypeSubPremiseNumber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseNumber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubPremiseTypeSubPremiseNumber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseNumber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseNumber obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseNumber);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseNumber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseNumber LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SubPremiseTypeSubPremiseNumber object
        /// </summary>
        public virtual SubPremiseTypeSubPremiseNumber Clone() {
            return ((SubPremiseTypeSubPremiseNumber)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum SubPremiseTypeSubPremiseNumberIndicatorOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum SubPremiseTypeSubPremiseNumberNumberTypeOccurrence {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubPremiseTypeSubPremiseNumberPrefix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SubPremiseTypeSubPremiseNumberPrefix {
        
        private string numberPrefixSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SubPremiseTypeSubPremiseNumberPrefix class constructor
        /// </summary>
        public SubPremiseTypeSubPremiseNumberPrefix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberPrefixSeparator {
            get {
                return this.numberPrefixSeparatorField;
            }
            set {
                this.numberPrefixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubPremiseTypeSubPremiseNumberPrefix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseNumberPrefix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubPremiseTypeSubPremiseNumberPrefix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseNumberPrefix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseNumberPrefix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseNumberPrefix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubPremiseTypeSubPremiseNumberPrefix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseNumberPrefix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubPremiseTypeSubPremiseNumberPrefix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseNumberPrefix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseNumberPrefix obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseNumberPrefix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseNumberPrefix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseNumberPrefix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SubPremiseTypeSubPremiseNumberPrefix object
        /// </summary>
        public virtual SubPremiseTypeSubPremiseNumberPrefix Clone() {
            return ((SubPremiseTypeSubPremiseNumberPrefix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubPremiseTypeSubPremiseNumberSuffix", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SubPremiseTypeSubPremiseNumberSuffix {
        
        private string numberSuffixSeparatorField;
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SubPremiseTypeSubPremiseNumberSuffix class constructor
        /// </summary>
        public SubPremiseTypeSubPremiseNumberSuffix() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberSuffixSeparator {
            get {
                return this.numberSuffixSeparatorField;
            }
            set {
                this.numberSuffixSeparatorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubPremiseTypeSubPremiseNumberSuffix));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseNumberSuffix object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubPremiseTypeSubPremiseNumberSuffix object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseNumberSuffix);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubPremiseTypeSubPremiseNumberSuffix obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseNumberSuffix Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubPremiseTypeSubPremiseNumberSuffix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubPremiseTypeSubPremiseNumberSuffix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubPremiseTypeSubPremiseNumberSuffix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubPremiseTypeSubPremiseNumberSuffix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseNumberSuffix obj, out System.Exception exception) {
            exception = null;
            obj = default(SubPremiseTypeSubPremiseNumberSuffix);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubPremiseTypeSubPremiseNumberSuffix obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubPremiseTypeSubPremiseNumberSuffix LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SubPremiseTypeSubPremiseNumberSuffix object
        /// </summary>
        public virtual SubPremiseTypeSubPremiseNumberSuffix Clone() {
            return ((SubPremiseTypeSubPremiseNumberSuffix)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    public enum ThoroughfareDependentThoroughfares {
        
        /// <remarks/>
        Yes,
        
        /// <remarks/>
        No,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsCountry", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsCountry {
        
        private List<AddressLine> addressLineField;
        
        private List<AddressDetailsCountryCountryNameCode> countryNameCodeField;
        
        private List<CountryName> countryNameField;
        
        private object itemField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsCountry class constructor
        /// </summary>
        public AddressDetailsCountry() {
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
            this.anyField = new List<System.Xml.XmlElement>();
            this.countryNameField = new List<CountryName>();
            this.countryNameCodeField = new List<AddressDetailsCountryCountryNameCode>();
            this.addressLineField = new List<AddressLine>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AddressLine")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressLine> AddressLine {
            get {
                return this.addressLineField;
            }
            set {
                this.addressLineField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryNameCode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AddressDetailsCountryCountryNameCode> CountryNameCode {
            get {
                return this.countryNameCodeField;
            }
            set {
                this.countryNameCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("CountryName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<CountryName> CountryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AdministrativeArea", typeof(AdministrativeArea))]
        [System.Xml.Serialization.XmlElementAttribute("Locality", typeof(Locality))]
        [System.Xml.Serialization.XmlElementAttribute("Thoroughfare", typeof(Thoroughfare))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsCountry));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsCountry object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsCountry object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsCountry object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsCountry obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsCountry);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsCountry obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsCountry Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsCountry)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsCountry object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsCountry object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsCountry object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsCountry obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsCountry);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsCountry obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsCountry LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsCountry object
        /// </summary>
        public virtual AddressDetailsCountry Clone() {
            return ((AddressDetailsCountry)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDetailsCountryCountryNameCode", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class AddressDetailsCountryCountryNameCode {
        
        private string schemeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddressDetailsCountryCountryNameCode class constructor
        /// </summary>
        public AddressDetailsCountryCountryNameCode() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Scheme {
            get {
                return this.schemeField;
            }
            set {
                this.schemeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddressDetailsCountryCountryNameCode));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddressDetailsCountryCountryNameCode object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddressDetailsCountryCountryNameCode object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddressDetailsCountryCountryNameCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddressDetailsCountryCountryNameCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsCountryCountryNameCode);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddressDetailsCountryCountryNameCode obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddressDetailsCountryCountryNameCode Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddressDetailsCountryCountryNameCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddressDetailsCountryCountryNameCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddressDetailsCountryCountryNameCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddressDetailsCountryCountryNameCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AddressDetailsCountryCountryNameCode obj, out System.Exception exception) {
            exception = null;
            obj = default(AddressDetailsCountryCountryNameCode);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddressDetailsCountryCountryNameCode obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddressDetailsCountryCountryNameCode LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AddressDetailsCountryCountryNameCode object
        /// </summary>
        public virtual AddressDetailsCountryCountryNameCode Clone() {
            return ((AddressDetailsCountryCountryNameCode)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryName", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class CountryName {
        
        private string typeField;
        
        private string codeField;
        
        private List<System.Xml.XmlAttribute> anyAttrField;
        
        private List<string> textField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CountryName class constructor
        /// </summary>
        public CountryName() {
            this.textField = new List<string>();
            this.anyAttrField = new List<System.Xml.XmlAttribute>();
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CountryName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CountryName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CountryName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CountryName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CountryName obj, out System.Exception exception) {
            exception = null;
            obj = default(CountryName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CountryName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CountryName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CountryName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CountryName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CountryName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CountryName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CountryName obj, out System.Exception exception) {
            exception = null;
            obj = default(CountryName);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CountryName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CountryName LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CountryName object
        /// </summary>
        public virtual CountryName Clone() {
            return ((CountryName)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("linkSnippet", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="SnippetType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SnippetType {
        
        private int maxLinesField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public SnippetType() {
            this.maxLinesField = 2;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(2)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int maxLines {
            get {
                return this.maxLinesField;
            }
            set {
                this.maxLinesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SnippetType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SnippetType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SnippetType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SnippetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SnippetType obj, out System.Exception exception) {
            exception = null;
            obj = default(SnippetType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SnippetType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SnippetType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SnippetType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SnippetType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SnippetType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SnippetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SnippetType obj, out System.Exception exception) {
            exception = null;
            obj = default(SnippetType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SnippetType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SnippetType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SnippetType object
        /// </summary>
        public virtual SnippetType Clone() {
            return ((SnippetType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ExtendedData", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtendedDataType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ExtendedDataType {
        
        private List<DataType> dataField;
        
        private List<SchemaDataType> schemaDataField;
        
        private List<System.Xml.XmlElement> anyField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ExtendedDataType class constructor
        /// </summary>
        public ExtendedDataType() {
            this.anyField = new List<System.Xml.XmlElement>();
            this.schemaDataField = new List<SchemaDataType>();
            this.dataField = new List<DataType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Data")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<DataType> Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SchemaData")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SchemaDataType> SchemaData {
            get {
                return this.schemaDataField;
            }
            set {
                this.schemaDataField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ExtendedDataType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ExtendedDataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ExtendedDataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ExtendedDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ExtendedDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtendedDataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ExtendedDataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ExtendedDataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ExtendedDataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ExtendedDataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ExtendedDataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ExtendedDataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ExtendedDataType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtendedDataType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ExtendedDataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ExtendedDataType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ExtendedDataType object
        /// </summary>
        public virtual ExtendedDataType Clone() {
            return ((ExtendedDataType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Metadata", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="MetadataType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class MetadataType {
        
        private List<System.Xml.XmlElement> anyField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// MetadataType class constructor
        /// </summary>
        public MetadataType() {
            this.anyField = new List<System.Xml.XmlElement>();
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<System.Xml.XmlElement> Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MetadataType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MetadataType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MetadataType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MetadataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MetadataType obj, out System.Exception exception) {
            exception = null;
            obj = default(MetadataType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MetadataType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MetadataType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MetadataType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MetadataType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MetadataType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MetadataType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MetadataType obj, out System.Exception exception) {
            exception = null;
            obj = default(MetadataType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MetadataType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MetadataType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this MetadataType object
        /// </summary>
        public virtual MetadataType Clone() {
            return ((MetadataType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhotoOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScreenOverlayType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroundOverlayType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOverlayGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractOverlayType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractOverlayType : AbstractFeatureType {
        
        private byte[] colorField;
        
        private int drawOrderField;
        
        private bool drawOrderFieldSpecified;
        
        private LinkType iconField;
        
        private List<string> abstractOverlaySimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractOverlayObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public AbstractOverlayType() {
            this.abstractOverlayObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractOverlaySimpleExtensionGroupField = new List<string>();
            this.iconField = new LinkType();
            this.colorField = new byte[0];
            this.drawOrderField = 0;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int drawOrder {
            get {
                return this.drawOrderField;
            }
            set {
                this.drawOrderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool drawOrderSpecified {
            get {
                return this.drawOrderFieldSpecified;
            }
            set {
                this.drawOrderFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LinkType Icon {
            get {
                return this.iconField;
            }
            set {
                this.iconField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractOverlaySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractOverlaySimpleExtensionGroup {
            get {
                return this.abstractOverlaySimpleExtensionGroupField;
            }
            set {
                this.abstractOverlaySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractOverlayObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractOverlayObjectExtensionGroup {
            get {
                return this.abstractOverlayObjectExtensionGroupField;
            }
            set {
                this.abstractOverlayObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractOverlayType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractOverlayType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractOverlayType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractOverlayType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractOverlayType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractOverlayType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractOverlayType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractOverlayType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractOverlayType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractOverlayType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractOverlayType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractOverlayType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractOverlayType object
        /// </summary>
        public virtual AbstractOverlayType Clone() {
            return ((AbstractOverlayType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("PhotoOverlay", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoOverlayType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PhotoOverlayType : AbstractOverlayType {
        
        private double rotationField;
        
        private bool rotationFieldSpecified;
        
        private ViewVolumeType viewVolumeField;
        
        private ImagePyramidType imagePyramidField;
        
        private PointType pointField;
        
        private shapeEnumType shapeField;
        
        private bool shapeFieldSpecified;
        
        private List<string> photoOverlaySimpleExtensionGroupField;
        
        private List<AbstractObjectType> photoOverlayObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PhotoOverlayType() {
            this.photoOverlayObjectExtensionGroupField = new List<AbstractObjectType>();
            this.photoOverlaySimpleExtensionGroupField = new List<string>();
            this.pointField = new PointType();
            this.imagePyramidField = new ImagePyramidType();
            this.viewVolumeField = new ViewVolumeType();
            this.rotationField = 0;
            this.shapeField = shapeEnumType.rectangle;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rotation {
            get {
                return this.rotationField;
            }
            set {
                this.rotationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rotationSpecified {
            get {
                return this.rotationFieldSpecified;
            }
            set {
                this.rotationFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ViewVolumeType ViewVolume {
            get {
                return this.viewVolumeField;
            }
            set {
                this.viewVolumeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ImagePyramidType ImagePyramid {
            get {
                return this.imagePyramidField;
            }
            set {
                this.imagePyramidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PointType Point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public shapeEnumType shape {
            get {
                return this.shapeField;
            }
            set {
                this.shapeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool shapeSpecified {
            get {
                return this.shapeFieldSpecified;
            }
            set {
                this.shapeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PhotoOverlaySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> PhotoOverlaySimpleExtensionGroup {
            get {
                return this.photoOverlaySimpleExtensionGroupField;
            }
            set {
                this.photoOverlaySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PhotoOverlayObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> PhotoOverlayObjectExtensionGroup {
            get {
                return this.photoOverlayObjectExtensionGroupField;
            }
            set {
                this.photoOverlayObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhotoOverlayType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhotoOverlayType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhotoOverlayType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhotoOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhotoOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(PhotoOverlayType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhotoOverlayType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhotoOverlayType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhotoOverlayType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PhotoOverlayType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PhotoOverlayType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhotoOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PhotoOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(PhotoOverlayType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PhotoOverlayType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PhotoOverlayType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PhotoOverlayType object
        /// </summary>
        public virtual PhotoOverlayType Clone() {
            return ((PhotoOverlayType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("shape", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    public enum shapeEnumType {
        
        /// <remarks/>
        rectangle,
        
        /// <remarks/>
        cylinder,
        
        /// <remarks/>
        sphere,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("ScreenOverlay", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScreenOverlayType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class ScreenOverlayType : AbstractOverlayType {
        
        private vec2Type overlayXYField;
        
        private vec2Type screenXYField;
        
        private vec2Type rotationXYField;
        
        private vec2Type sizeField;
        
        private double rotationField;
        
        private bool rotationFieldSpecified;
        
        private List<string> screenOverlaySimpleExtensionGroupField;
        
        private List<AbstractObjectType> screenOverlayObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ScreenOverlayType() {
            this.screenOverlayObjectExtensionGroupField = new List<AbstractObjectType>();
            this.screenOverlaySimpleExtensionGroupField = new List<string>();
            this.sizeField = new vec2Type();
            this.rotationXYField = new vec2Type();
            this.screenXYField = new vec2Type();
            this.overlayXYField = new vec2Type();
            this.rotationField = 0;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public vec2Type overlayXY {
            get {
                return this.overlayXYField;
            }
            set {
                this.overlayXYField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public vec2Type screenXY {
            get {
                return this.screenXYField;
            }
            set {
                this.screenXYField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public vec2Type rotationXY {
            get {
                return this.rotationXYField;
            }
            set {
                this.rotationXYField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public vec2Type size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rotation {
            get {
                return this.rotationField;
            }
            set {
                this.rotationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool rotationSpecified {
            get {
                return this.rotationFieldSpecified;
            }
            set {
                this.rotationFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ScreenOverlaySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> ScreenOverlaySimpleExtensionGroup {
            get {
                return this.screenOverlaySimpleExtensionGroupField;
            }
            set {
                this.screenOverlaySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ScreenOverlayObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> ScreenOverlayObjectExtensionGroup {
            get {
                return this.screenOverlayObjectExtensionGroupField;
            }
            set {
                this.screenOverlayObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ScreenOverlayType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ScreenOverlayType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ScreenOverlayType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ScreenOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ScreenOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(ScreenOverlayType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ScreenOverlayType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ScreenOverlayType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ScreenOverlayType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ScreenOverlayType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ScreenOverlayType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ScreenOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ScreenOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(ScreenOverlayType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ScreenOverlayType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ScreenOverlayType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this ScreenOverlayType object
        /// </summary>
        public virtual ScreenOverlayType Clone() {
            return ((ScreenOverlayType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("GroundOverlay", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroundOverlayType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class GroundOverlayType : AbstractOverlayType {
        
        private double altitudeField;
        
        private bool altitudeFieldSpecified;
        
        private altitudeModeEnumType item4Field;
        
        private LatLonBoxType latLonBoxField;
        
        private List<string> groundOverlaySimpleExtensionGroupField;
        
        private List<AbstractObjectType> groundOverlayObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public GroundOverlayType() {
            this.groundOverlayObjectExtensionGroupField = new List<AbstractObjectType>();
            this.groundOverlaySimpleExtensionGroupField = new List<string>();
            this.latLonBoxField = new LatLonBoxType();
            this.altitudeField = 0;
            this.item4Field = altitudeModeEnumType.clampToGround;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double altitude {
            get {
                return this.altitudeField;
            }
            set {
                this.altitudeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool altitudeSpecified {
            get {
                return this.altitudeFieldSpecified;
            }
            set {
                this.altitudeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("altitudeMode")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public altitudeModeEnumType Item4 {
            get {
                return this.item4Field;
            }
            set {
                this.item4Field = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LatLonBoxType LatLonBox {
            get {
                return this.latLonBoxField;
            }
            set {
                this.latLonBoxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("GroundOverlaySimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> GroundOverlaySimpleExtensionGroup {
            get {
                return this.groundOverlaySimpleExtensionGroupField;
            }
            set {
                this.groundOverlaySimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("GroundOverlayObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> GroundOverlayObjectExtensionGroup {
            get {
                return this.groundOverlayObjectExtensionGroupField;
            }
            set {
                this.groundOverlayObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GroundOverlayType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GroundOverlayType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GroundOverlayType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GroundOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GroundOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(GroundOverlayType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GroundOverlayType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GroundOverlayType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GroundOverlayType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current GroundOverlayType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an GroundOverlayType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GroundOverlayType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out GroundOverlayType obj, out System.Exception exception) {
            exception = null;
            obj = default(GroundOverlayType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out GroundOverlayType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static GroundOverlayType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this GroundOverlayType object
        /// </summary>
        public virtual GroundOverlayType Clone() {
            return ((GroundOverlayType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("NetworkLink", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkLinkType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class NetworkLinkType : AbstractFeatureType {
        
        private bool refreshVisibilityField;
        
        private bool refreshVisibilityFieldSpecified;
        
        private bool flyToViewField;
        
        private bool flyToViewFieldSpecified;
        
        private LinkType item4Field;
        
        private List<string> networkLinkSimpleExtensionGroupField;
        
        private List<AbstractObjectType> networkLinkObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public Item4ChoiceType Item4ElementName {get; set;}

        
        public NetworkLinkType() {
            this.networkLinkObjectExtensionGroupField = new List<AbstractObjectType>();
            this.networkLinkSimpleExtensionGroupField = new List<string>();
            this.item4Field = new LinkType();
            this.refreshVisibilityField = false;
            this.flyToViewField = false;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool refreshVisibility {
            get {
                return this.refreshVisibilityField;
            }
            set {
                this.refreshVisibilityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool refreshVisibilitySpecified {
            get {
                return this.refreshVisibilityFieldSpecified;
            }
            set {
                this.refreshVisibilityFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool flyToView {
            get {
                return this.flyToViewField;
            }
            set {
                this.flyToViewField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool flyToViewSpecified {
            get {
                return this.flyToViewFieldSpecified;
            }
            set {
                this.flyToViewFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Link", typeof(LinkType))]
        [System.Xml.Serialization.XmlElementAttribute("Url", typeof(LinkType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Item4ElementName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LinkType Item4 {
            get {
                return this.item4Field;
            }
            set {
                this.item4Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLinkSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> NetworkLinkSimpleExtensionGroup {
            get {
                return this.networkLinkSimpleExtensionGroupField;
            }
            set {
                this.networkLinkSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLinkObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> NetworkLinkObjectExtensionGroup {
            get {
                return this.networkLinkObjectExtensionGroupField;
            }
            set {
                this.networkLinkObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NetworkLinkType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NetworkLinkType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an NetworkLinkType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NetworkLinkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NetworkLinkType obj, out System.Exception exception) {
            exception = null;
            obj = default(NetworkLinkType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out NetworkLinkType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static NetworkLinkType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((NetworkLinkType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current NetworkLinkType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an NetworkLinkType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NetworkLinkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NetworkLinkType obj, out System.Exception exception) {
            exception = null;
            obj = default(NetworkLinkType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out NetworkLinkType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static NetworkLinkType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this NetworkLinkType object
        /// </summary>
        public virtual NetworkLinkType Clone() {
            return ((NetworkLinkType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2", IncludeInSchema=false)]
    public enum Item4ChoiceType {
        
        /// <remarks/>
        Link,
        
        /// <remarks/>
        Url,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Placemark", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlacemarkType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class PlacemarkType : AbstractFeatureType {
        
        private List<string> placemarkSimpleExtensionGroupField;
        
        private List<AbstractObjectType> placemarkObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlElementAttribute("LineString",typeof(LineStringType))]
    [System.Xml.Serialization.XmlElementAttribute("LinearRing",typeof(LinearRingType))]
    [System.Xml.Serialization.XmlElementAttribute("Model",typeof(ModelType))]
    [System.Xml.Serialization.XmlElementAttribute("MultiGeometry",typeof(MultiGeometryType))]
    [System.Xml.Serialization.XmlElementAttribute("Point",typeof(PointType))]
    [System.Xml.Serialization.XmlElementAttribute("Polygon",typeof(PolygonType))]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public AbstractGeometryType Item4 {get; set;}

        
        /// <summary>
        /// PlacemarkType class constructor
        /// </summary>
        public PlacemarkType() {
            this.placemarkObjectExtensionGroupField = new List<AbstractObjectType>();
            this.placemarkSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PlacemarkSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> PlacemarkSimpleExtensionGroup {
            get {
                return this.placemarkSimpleExtensionGroupField;
            }
            set {
                this.placemarkSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("PlacemarkObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> PlacemarkObjectExtensionGroup {
            get {
                return this.placemarkObjectExtensionGroupField;
            }
            set {
                this.placemarkObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PlacemarkType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlacemarkType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PlacemarkType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlacemarkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PlacemarkType obj, out System.Exception exception) {
            exception = null;
            obj = default(PlacemarkType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PlacemarkType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PlacemarkType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PlacemarkType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PlacemarkType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PlacemarkType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlacemarkType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PlacemarkType obj, out System.Exception exception) {
            exception = null;
            obj = default(PlacemarkType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PlacemarkType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PlacemarkType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this PlacemarkType object
        /// </summary>
        public virtual PlacemarkType Clone() {
            return ((PlacemarkType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FolderType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DocumentType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractContainerGroup", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractContainerType", Namespace="http://www.opengis.net/kml/2.2")]
    public abstract partial class AbstractContainerType : AbstractFeatureType {
        
        private List<string> abstractContainerSimpleExtensionGroupField;
        
        private List<AbstractObjectType> abstractContainerObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AbstractContainerType class constructor
        /// </summary>
        public AbstractContainerType() {
            this.abstractContainerObjectExtensionGroupField = new List<AbstractObjectType>();
            this.abstractContainerSimpleExtensionGroupField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractContainerSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> AbstractContainerSimpleExtensionGroup {
            get {
                return this.abstractContainerSimpleExtensionGroupField;
            }
            set {
                this.abstractContainerSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AbstractContainerObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> AbstractContainerObjectExtensionGroup {
            get {
                return this.abstractContainerObjectExtensionGroupField;
            }
            set {
                this.abstractContainerObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AbstractContainerType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AbstractContainerType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AbstractContainerType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AbstractContainerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AbstractContainerType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractContainerType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AbstractContainerType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AbstractContainerType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AbstractContainerType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AbstractContainerType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AbstractContainerType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AbstractContainerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out AbstractContainerType obj, out System.Exception exception) {
            exception = null;
            obj = default(AbstractContainerType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AbstractContainerType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AbstractContainerType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this AbstractContainerType object
        /// </summary>
        public virtual AbstractContainerType Clone() {
            return ((AbstractContainerType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Folder", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class FolderType : AbstractContainerType {
        
        private List<AbstractFeatureType> items1Field;
        
        private List<string> folderSimpleExtensionGroupField;
        
        private List<AbstractObjectType> folderObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// FolderType class constructor
        /// </summary>
        public FolderType() {
            this.folderObjectExtensionGroupField = new List<AbstractObjectType>();
            this.folderSimpleExtensionGroupField = new List<string>();
            this.items1Field = new List<AbstractFeatureType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLink", typeof(NetworkLinkType))]
        [System.Xml.Serialization.XmlElementAttribute("Placemark", typeof(PlacemarkType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractFeatureType> Items1 {
            get {
                return this.items1Field;
            }
            set {
                this.items1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("FolderSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> FolderSimpleExtensionGroup {
            get {
                return this.folderSimpleExtensionGroupField;
            }
            set {
                this.folderSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("FolderObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> FolderObjectExtensionGroup {
            get {
                return this.folderObjectExtensionGroupField;
            }
            set {
                this.folderObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FolderType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FolderType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FolderType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FolderType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FolderType obj, out System.Exception exception) {
            exception = null;
            obj = default(FolderType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FolderType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FolderType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FolderType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FolderType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FolderType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FolderType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FolderType obj, out System.Exception exception) {
            exception = null;
            obj = default(FolderType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FolderType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FolderType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this FolderType object
        /// </summary>
        public virtual FolderType Clone() {
            return ((FolderType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Document", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocumentType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DocumentType : AbstractContainerType {
        
        private List<SchemaType> schemaField;
        
        private List<AbstractFeatureType> items1Field;
        
        private List<string> documentSimpleExtensionGroupField;
        
        private List<AbstractObjectType> documentObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DocumentType class constructor
        /// </summary>
        public DocumentType() {
            this.documentObjectExtensionGroupField = new List<AbstractObjectType>();
            this.documentSimpleExtensionGroupField = new List<string>();
            this.items1Field = new List<AbstractFeatureType>();
            this.schemaField = new List<SchemaType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Schema")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SchemaType> Schema {
            get {
                return this.schemaField;
            }
            set {
                this.schemaField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLink", typeof(NetworkLinkType))]
        [System.Xml.Serialization.XmlElementAttribute("Placemark", typeof(PlacemarkType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractFeatureType> Items1 {
            get {
                return this.items1Field;
            }
            set {
                this.items1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DocumentSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> DocumentSimpleExtensionGroup {
            get {
                return this.documentSimpleExtensionGroupField;
            }
            set {
                this.documentSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DocumentObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> DocumentObjectExtensionGroup {
            get {
                return this.documentObjectExtensionGroupField;
            }
            set {
                this.documentObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DocumentType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DocumentType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DocumentType obj, out System.Exception exception) {
            exception = null;
            obj = default(DocumentType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DocumentType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DocumentType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DocumentType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DocumentType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DocumentType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DocumentType obj, out System.Exception exception) {
            exception = null;
            obj = default(DocumentType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DocumentType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DocumentType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DocumentType object
        /// </summary>
        public virtual DocumentType Clone() {
            return ((DocumentType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Schema", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchemaType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SchemaType {
        
        private List<SimpleFieldType> simpleFieldField;
        
        private List<object> schemaExtensionField;
        
        private string nameField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SchemaType class constructor
        /// </summary>
        public SchemaType() {
            this.schemaExtensionField = new List<object>();
            this.simpleFieldField = new List<SimpleFieldType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SimpleField")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<SimpleFieldType> SimpleField {
            get {
                return this.simpleFieldField;
            }
            set {
                this.simpleFieldField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SchemaExtension")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> SchemaExtension {
            get {
                return this.schemaExtensionField;
            }
            set {
                this.schemaExtensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SchemaType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SchemaType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SchemaType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SchemaType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SchemaType obj, out System.Exception exception) {
            exception = null;
            obj = default(SchemaType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SchemaType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SchemaType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SchemaType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SchemaType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SchemaType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SchemaType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SchemaType obj, out System.Exception exception) {
            exception = null;
            obj = default(SchemaType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SchemaType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SchemaType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SchemaType object
        /// </summary>
        public virtual SchemaType Clone() {
            return ((SchemaType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("SimpleField", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleFieldType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class SimpleFieldType {
        
        private string displayNameField;
        
        private List<object> simpleFieldExtensionField;
        
        private string typeField;
        
        private string nameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SimpleFieldType class constructor
        /// </summary>
        public SimpleFieldType() {
            this.simpleFieldExtensionField = new List<object>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SimpleFieldExtension")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> SimpleFieldExtension {
            get {
                return this.simpleFieldExtensionField;
            }
            set {
                this.simpleFieldExtensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SimpleFieldType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SimpleFieldType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SimpleFieldType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SimpleFieldType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SimpleFieldType obj, out System.Exception exception) {
            exception = null;
            obj = default(SimpleFieldType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SimpleFieldType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SimpleFieldType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SimpleFieldType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SimpleFieldType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SimpleFieldType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SimpleFieldType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SimpleFieldType obj, out System.Exception exception) {
            exception = null;
            obj = default(SimpleFieldType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SimpleFieldType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SimpleFieldType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this SimpleFieldType object
        /// </summary>
        public virtual SimpleFieldType Clone() {
            return ((SimpleFieldType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2", IncludeInSchema=false)]
    public enum ItemsChoiceType1 {
        
        /// <remarks/>
        Alias,
        
        /// <remarks/>
        Data,
        
        /// <remarks/>
        Icon,
        
        /// <remarks/>
        ImagePyramid,
        
        /// <remarks/>
        ItemIcon,
        
        /// <remarks/>
        LatLonAltBox,
        
        /// <remarks/>
        LatLonBox,
        
        /// <remarks/>
        Link,
        
        /// <remarks/>
        Location,
        
        /// <remarks/>
        Lod,
        
        /// <remarks/>
        Orientation,
        
        /// <remarks/>
        Pair,
        
        /// <remarks/>
        Region,
        
        /// <remarks/>
        ResourceMap,
        
        /// <remarks/>
        Scale,
        
        /// <remarks/>
        SchemaData,
        
        /// <remarks/>
        Url,
        
        /// <remarks/>
        ViewVolume,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Delete", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeleteType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class DeleteType {
        
        private List<AbstractFeatureType> itemsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeleteType class constructor
        /// </summary>
        public DeleteType() {
            this.itemsField = new List<AbstractFeatureType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLink", typeof(NetworkLinkType))]
        [System.Xml.Serialization.XmlElementAttribute("Placemark", typeof(PlacemarkType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractFeatureType> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeleteType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeleteType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeleteType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeleteType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeleteType obj, out System.Exception exception) {
            exception = null;
            obj = default(DeleteType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeleteType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeleteType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeleteType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeleteType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeleteType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeleteType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DeleteType obj, out System.Exception exception) {
            exception = null;
            obj = default(DeleteType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeleteType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeleteType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this DeleteType object
        /// </summary>
        public virtual DeleteType Clone() {
            return ((DeleteType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Create", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class CreateType {
        
        private List<AbstractContainerType> itemsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CreateType class constructor
        /// </summary>
        public CreateType() {
            this.itemsField = new List<AbstractContainerType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Document", typeof(DocumentType))]
        [System.Xml.Serialization.XmlElementAttribute("Folder", typeof(FolderType))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractContainerType> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreateType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreateType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreateType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreateType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreateType obj, out System.Exception exception) {
            exception = null;
            obj = default(CreateType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreateType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreateType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreateType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreateType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreateType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreateType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out CreateType obj, out System.Exception exception) {
            exception = null;
            obj = default(CreateType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreateType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreateType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this CreateType object
        /// </summary>
        public virtual CreateType Clone() {
            return ((CreateType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("Update", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class UpdateType {
        
        private string targetHrefField;
        
        private List<object> itemsField;
        
        private List<object> updateExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// UpdateType class constructor
        /// </summary>
        public UpdateType() {
            this.updateExtensionGroupField = new List<object>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string targetHref {
            get {
                return this.targetHrefField;
            }
            set {
                this.targetHrefField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Change", typeof(ChangeType))]
        [System.Xml.Serialization.XmlElementAttribute("Create", typeof(CreateType))]
        [System.Xml.Serialization.XmlElementAttribute("Delete", typeof(DeleteType))]
        [System.Xml.Serialization.XmlElementAttribute("UpdateOpExtensionGroup", typeof(object))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("UpdateExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<object> UpdateExtensionGroup {
            get {
                return this.updateExtensionGroupField;
            }
            set {
                this.updateExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(UpdateType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current UpdateType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an UpdateType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output UpdateType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out UpdateType obj, out System.Exception exception) {
            exception = null;
            obj = default(UpdateType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out UpdateType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static UpdateType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((UpdateType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current UpdateType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an UpdateType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output UpdateType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out UpdateType obj, out System.Exception exception) {
            exception = null;
            obj = default(UpdateType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out UpdateType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static UpdateType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this UpdateType object
        /// </summary>
        public virtual UpdateType Clone() {
            return ((UpdateType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("NetworkLinkControl", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkLinkControlType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class NetworkLinkControlType {
        
        private double minRefreshPeriodField;
        
        private bool minRefreshPeriodFieldSpecified;
        
        private double maxSessionLengthField;
        
        private bool maxSessionLengthFieldSpecified;
        
        private string cookieField;
        
        private string messageField;
        
        private string linkNameField;
        
        private string linkDescriptionField;
        
        private SnippetType linkSnippetField;
        
        private string expiresField;
        
        private UpdateType updateField;
        
        private List<string> networkLinkControlSimpleExtensionGroupField;
        
        private List<AbstractObjectType> networkLinkControlObjectExtensionGroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlElementAttribute("Camera",typeof(CameraType))]
    [System.Xml.Serialization.XmlElementAttribute("LookAt",typeof(LookAtType))]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public AbstractViewType Item {get; set;}

        
        public NetworkLinkControlType() {
            this.networkLinkControlObjectExtensionGroupField = new List<AbstractObjectType>();
            this.networkLinkControlSimpleExtensionGroupField = new List<string>();
            this.updateField = new UpdateType();
            this.linkSnippetField = new SnippetType();
            this.minRefreshPeriodField = 0;
            this.maxSessionLengthField = -1;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double minRefreshPeriod {
            get {
                return this.minRefreshPeriodField;
            }
            set {
                this.minRefreshPeriodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool minRefreshPeriodSpecified {
            get {
                return this.minRefreshPeriodFieldSpecified;
            }
            set {
                this.minRefreshPeriodFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double maxSessionLength {
            get {
                return this.maxSessionLengthField;
            }
            set {
                this.maxSessionLengthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool maxSessionLengthSpecified {
            get {
                return this.maxSessionLengthFieldSpecified;
            }
            set {
                this.maxSessionLengthFieldSpecified = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cookie {
            get {
                return this.cookieField;
            }
            set {
                this.cookieField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string linkName {
            get {
                return this.linkNameField;
            }
            set {
                this.linkNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string linkDescription {
            get {
                return this.linkDescriptionField;
            }
            set {
                this.linkDescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SnippetType linkSnippet {
            get {
                return this.linkSnippetField;
            }
            set {
                this.linkSnippetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string expires {
            get {
                return this.expiresField;
            }
            set {
                this.expiresField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UpdateType Update {
            get {
                return this.updateField;
            }
            set {
                this.updateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLinkControlSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> NetworkLinkControlSimpleExtensionGroup {
            get {
                return this.networkLinkControlSimpleExtensionGroupField;
            }
            set {
                this.networkLinkControlSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("NetworkLinkControlObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> NetworkLinkControlObjectExtensionGroup {
            get {
                return this.networkLinkControlObjectExtensionGroupField;
            }
            set {
                this.networkLinkControlObjectExtensionGroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NetworkLinkControlType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NetworkLinkControlType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an NetworkLinkControlType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NetworkLinkControlType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NetworkLinkControlType obj, out System.Exception exception) {
            exception = null;
            obj = default(NetworkLinkControlType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out NetworkLinkControlType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static NetworkLinkControlType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((NetworkLinkControlType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current NetworkLinkControlType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an NetworkLinkControlType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NetworkLinkControlType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out NetworkLinkControlType obj, out System.Exception exception) {
            exception = null;
            obj = default(NetworkLinkControlType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out NetworkLinkControlType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static NetworkLinkControlType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this NetworkLinkControlType object
        /// </summary>
        public virtual NetworkLinkControlType Clone() {
            return ((NetworkLinkControlType)(this.MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.3.0.39603")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/kml/2.2")]
    [System.Xml.Serialization.XmlRootAttribute("kml", Namespace="http://www.opengis.net/kml/2.2", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="KmlType", Namespace="http://www.opengis.net/kml/2.2")]
    public partial class KmlType {
        
        private NetworkLinkControlType networkLinkControlField;
        
        private List<string> kmlSimpleExtensionGroupField;
        
        private List<AbstractObjectType> kmlObjectExtensionGroupField;
        
        private string hintField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
    [System.Xml.Serialization.XmlElementAttribute("NetworkLink",typeof(NetworkLinkType))]
    [System.Xml.Serialization.XmlElementAttribute("Placemark",typeof(PlacemarkType))]
    [System.Runtime.Serialization.DataMemberAttribute()]
    public AbstractFeatureType Item {get; set;}

        
        /// <summary>
        /// KmlType class constructor
        /// </summary>
        public KmlType() {
            this.kmlObjectExtensionGroupField = new List<AbstractObjectType>();
            this.kmlSimpleExtensionGroupField = new List<string>();
            this.networkLinkControlField = new NetworkLinkControlType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NetworkLinkControlType NetworkLinkControl {
            get {
                return this.networkLinkControlField;
            }
            set {
                this.networkLinkControlField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("KmlSimpleExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<string> KmlSimpleExtensionGroup {
            get {
                return this.kmlSimpleExtensionGroupField;
            }
            set {
                this.kmlSimpleExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("KmlObjectExtensionGroup")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<AbstractObjectType> KmlObjectExtensionGroup {
            get {
                return this.kmlObjectExtensionGroupField;
            }
            set {
                this.kmlObjectExtensionGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hint {
            get {
                return this.hintField;
            }
            set {
                this.hintField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(KmlType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current KmlType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an KmlType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output KmlType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out KmlType obj, out System.Exception exception) {
            exception = null;
            obj = default(KmlType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out KmlType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static KmlType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((KmlType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current KmlType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an KmlType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output KmlType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out KmlType obj, out System.Exception exception) {
            exception = null;
            obj = default(KmlType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out KmlType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static KmlType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this KmlType object
        /// </summary>
        public virtual KmlType Clone() {
            return ((KmlType)(this.MemberwiseClone()));
        }
        #endregion
    }
}
